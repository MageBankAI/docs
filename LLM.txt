Directory structure:
└── magebankai-docs/
    ├── README.md
    ├── docs.json
    ├── index.mdx
    ├── mcp-and-a2a.mdx
    ├── api-reference/
    │   ├── introduction.mdx
    │   ├── openapi.json
    │   ├── agents/
    │   │   ├── create-agent.mdx
    │   │   ├── deposit.mdx
    │   │   ├── get-agent.mdx
    │   │   ├── get-user-agents.mdx
    │   │   ├── introduction.mdx
    │   │   └── withdraw.mdx
    │   ├── endpoint/
    │   │   ├── create.mdx
    │   │   ├── delete.mdx
    │   │   ├── get.mdx
    │   │   └── webhook.mdx
    │   ├── payments/
    │   │   ├── approve-payment.mdx
    │   │   ├── decline-payment.mdx
    │   │   ├── export-payments.mdx
    │   │   ├── get-payment.mdx
    │   │   ├── get-user-payments.mdx
    │   │   ├── introduction.mdx
    │   │   └── register-payment.mdx
    │   ├── savings/
    │   │   ├── calculate-interest.mdx
    │   │   ├── deposit.mdx
    │   │   ├── get-agent-investments.mdx
    │   │   ├── get-dashboard.mdx
    │   │   ├── get-interest-rate.mdx
    │   │   ├── get-user-investments.mdx
    │   │   ├── introduction.mdx
    │   │   └── withdraw.mdx
    │   ├── transactions/
    │   │   ├── get-transaction-summary.mdx
    │   │   └── introduction.mdx
    │   └── users/
    │       ├── get-wallet-balance.mdx
    │       └── introduction.mdx
    ├── essentials/
    │   ├── code.mdx
    │   ├── images.mdx
    │   ├── markdown.mdx
    │   ├── navigation.mdx
    │   ├── reusable-snippets.mdx
    │   └── settings.mdx
    ├── images/
    │   ├── get-api-key/
    │   ├── register-agent/
    │   ├── savings-vault/
    │   └── transactions/
    ├── logo/
    ├── snippets/
    │   ├── api-key-notice.mdx
    │   ├── error-handling.mdx
    │   ├── response-formats.mdx
    │   └── snippet-intro.mdx
    └── user-guide/
        ├── financing.mdx
        ├── get-api-key.mdx
        ├── register-agent.mdx
        ├── savings-vault.mdx
        └── transactions.mdx

================================================
FILE: README.md
================================================
# MageBank API Documentation

This repository contains comprehensive documentation for the MageBank API, built with [Mintlify](https://mintlify.com/).

## Getting Started

Follow these steps to set up and run the documentation locally:

### Prerequisites

- Node.js (version 19 or higher)
- npm or yarn

### Installation

1. Clone this repository:
```bash
git clone https://github.com/yourusername/magebank-docs.git
cd magebank-docs
```

2. Install the Mintlify CLI:
```bash
npm install -g mintlify
```

3. Run the documentation locally:
```bash
mintlify dev
```

The documentation will be available at `http://localhost:3000`.

## Project Structure

```
magebank-docs/
├── README.md                      # This file
├── docs.json                      # Main configuration file
├── index.mdx                      # Homepage
├── quickstart.mdx                 # Quickstart guide
├── development.mdx                # Development guide
├── api-reference/                 # API reference documentation
│   ├── introduction.mdx           # API introduction
│   ├── openapi.json               # OpenAPI specification
│   ├── agents/                    # Agents API endpoints
│   ├── wallets/                   # Wallets API endpoints
│   ├── transactions/              # Transactions API endpoints
│   ├── investments/               # Investments API endpoints
│   ├── payments/                  # Payments API endpoints
│   ├── users/                     # Users API endpoints
│   └── savings/                   # Savings API endpoints
├── user-guide/                    # User guides
├── images/                        # Images for the documentation
├── logo/                          # Logo files
└── snippets/                      # Reusable content snippets
```

## Deployment

To deploy the documentation, follow these steps:

1. Push your changes to the main branch of your repository.
2. Connect your repository to [Mintlify](https://mintlify.com/).
3. Follow the deployment instructions on the Mintlify dashboard.

## Contributing

1. Create a new branch for your changes.
2. Make your changes and test them locally using `mintlify dev`.
3. Commit your changes and push them to your branch.
4. Create a pull request to merge your changes into the main branch.

## Customizing the Documentation

### Adding New Pages

1. Create a new `.mdx` file in the appropriate directory.
2. Add the page to the navigation in `docs.json`.

### Updating the OpenAPI Specification

1. Update the `api-reference/openapi.json` file with your changes.
2. Run `mintlify dev` to see the changes.

### Changing the Theme

Edit the `colors` section in `docs.json` to customize the theme:

```json
"colors": {
    "primary": "#FF5722",
    "light": "#FF7043",
    "dark": "#E64A19"
}
```

## Need Help?

If you need assistance with the documentation, please contact:

- Email: support@magebank.ai
- GitHub: Open an issue in this repository

## License

This documentation is provided under the [MIT License](LICENSE).


================================================
FILE: docs.json
================================================
{
    "$schema": "https://mintlify.com/docs.json",
    "theme": "mint",
    "name": "MageBank API Documentation",
    "colors": {
        "primary": "#FF5722",
        "light": "#FF7043",
        "dark": "#E64A19"
    },
    "favicon": "/favicon.ico",
    "navigation": {
        "tabs": [
            {
                "tab": "Guides",
                "groups": [
                    {
                        "group": "Get Started",
                        "pages": [
                            "index",
                            "mcp-and-a2a"
                        ]
                    },
                    {
                        "group": "User Guide",
                        "pages": [
                            "user-guide/get-api-key",
                            "user-guide/register-agent",
                            "user-guide/transactions",
                            "user-guide/savings-vault",
                            "user-guide/financing"
                        ]
                    }
                ]
            },
            {
                "tab": "API Reference",
                "groups": [
                    {
                        "group": "Users",
                        "pages": [
                            "api-reference/users/introduction",
                            "api-reference/users/get-wallet-balance"
                        ]
                    },
                    {
                        "group": "Agents",
                        "pages": [
                            "api-reference/agents/introduction",
                            "api-reference/agents/get-agent",
                            "api-reference/agents/create-agent",
                            "api-reference/agents/get-user-agents",
                            "api-reference/agents/deposit",
                            "api-reference/agents/withdraw"
                        ]
                    },
                    {
                        "group": "Payments",
                        "pages": [
                            "api-reference/payments/introduction",
                            "api-reference/payments/register-payment",
                            "api-reference/payments/approve-payment",
                            "api-reference/payments/decline-payment",
                            "api-reference/payments/get-payment",
                            "api-reference/payments/get-user-payments",
                            "api-reference/payments/export-payments"
                        ]
                    },
                    {
                        "group": "Transactions",
                        "pages": [
                            "api-reference/transactions/introduction",
                            "api-reference/transactions/get-transaction-summary"
                        ]
                    },
                    {
                        "group": "Savings",
                        "pages": [
                            "api-reference/savings/introduction",
                            "api-reference/savings/get-interest-rate",
                            "api-reference/savings/calculate-interest",
                            "api-reference/savings/deposit",
                            "api-reference/savings/withdraw",
                            "api-reference/savings/get-dashboard",
                            "api-reference/savings/get-agent-investments",
                            "api-reference/savings/get-user-investments"
                        ]
                    }
                ]
            }
        ],
        "global": {
            "anchors": [
                {
                    "anchor": "Documentation",
                    "href": "https://api.magebank.ai/docs",
                    "icon": "book-open-cover"
                },
                {
                    "anchor": "API Reference",
                    "href": "https://api.magebank.ai/api-docs",
                    "icon": "code"
                },
                {
                    "anchor": "Dashboard",
                    "href": "https://www.magebank.ai/dashboard",
                    "icon": "gauge"
                }
            ]
        }
    },
    "logo": {
        "light": "/logo/logo.svg",
        "dark": "/logo/logo.svg"
    },
    "navbar": {
        "links": [
            {
                "label": "Support",
                "href": "mailto:support@magebank.ai"
            }
        ],
        "primary": {
            "type": "button",
            "label": "Dashboard",
            "href": "https://www.magebank.ai/dashboard"
        }
    },
    "footer": {
        "socials": {
            "x": "https://x.com/magebank",
            "github": "https://github.com/magebank",
            "linkedin": "https://linkedin.com/company/magebank"
        }
    },
    "api": {
        "baseUrl": "https://api.magebank.ai",
        "auth": {
            "method": "key",
            "name": "x-api-key",
            "inputPrefix": ""
        },
        "playground": {
            "mode": "show"
        }
    },
    "openapi": "/api-reference/openapi.json"
}


================================================
FILE: index.mdx
================================================
---
title: Introduction
description: "Welcome to the MageBank API documentation"
icon: "landmark"
---

<img
    className="block dark:hidden rounded-lg"
    src="/images/hero-dashboard.png"
    alt="MageBank Hero Light"
/>
<img
    className="hidden dark:block rounded-lg"
    src="/images/hero-dashboard.png"
    alt="MageBank Hero Dark"
/>

## Welcome to MageBank API

MageBank is a multi-agentic economy bank where AI agents can manage, grow, and transact their wealth. Built specifically for AI agents trusted by humans, MageBank connects to every bank, wallet, and network on Earth, providing the financial infrastructure needed to power the emerging agent economy.

<Warning>
    We are currently in **sandbox mode only**. Agent-to-agent transactions are
    currently supported, with agent-to-bank account, agent-to-businesses, and
    agent-to-checkout pages coming soon.
</Warning>

<Note>
    **Get started quickly!** As soon as you register, you'll receive a **$20
    deposit** to test the application and explore all features.
</Note>

Our API provides programmatic access to all MageBank features, enabling you to integrate powerful financial automation into your applications.

<CardGroup cols={2}>
    <Card title="Get API Key" icon="key" href="/user-guide/get-api-key">
        Generate your API key to authenticate your agents
    </Card>
    <Card title="Register Agent" icon="robot" href="/user-guide/register-agent">
        Create and configure AI agents for your business needs
    </Card>
    <Card
        title="Transactions"
        icon="money-bill-transfer"
        href="/user-guide/transactions"
    >
        Process payments and transfers between agents
    </Card>
    <Card title="Savings Vault" icon="vault" href="/user-guide/savings-vault">
        Optimize your holdings and earn yield on your USDC
    </Card>
</CardGroup>

## API Reference

Integrate MageBank directly into your applications with our comprehensive API.

<CardGroup cols={2}>
    <Card
        title="Users API"
        icon="user"
        href="/api-reference/users/introduction"
    >
        Manage user accounts and wallet balances
    </Card>
    <Card
        title="Agents API"
        icon="robot"
        href="/api-reference/agents/introduction"
    >
        Create and manage AI financial agents
    </Card>
    <Card
        title="Payments API"
        icon="credit-card"
        href="/api-reference/payments/introduction"
    >
        Process financial transactions
    </Card>
    <Card
        title="Transactions API"
        icon="exchange"
        href="/api-reference/transactions/introduction"
    >
        Track and analyze transaction history
    </Card>
    <Card
        title="Savings API"
        icon="piggy-bank"
        href="/api-reference/savings/introduction"
    >
        Manage interest-bearing investments
    </Card>
</CardGroup>

## Authentication

All API endpoints require authentication using an API key. Your API key should be included in all requests as an HTTP header:

```bash
x-api-key: YOUR_API_KEY
```

<Note>
    Never share your API key or expose it in client-side code. Always keep it
    secure and make requests from your server.
</Note>

## Base URL

All API requests should be made to:

```
https://api.magebank.ai
```

## Response Format

All API responses are returned in JSON format. Successful responses typically include:

```json
{
  "success": true,
  "... additional data fields ..."
}
```

## Error Handling

When an error occurs, the API returns an appropriate HTTP status code and a JSON object explaining the error:

```json
{
    "error": "Descriptive error message"
}
```

Common HTTP status codes:

| Status Code | Description                                             |
| ----------- | ------------------------------------------------------- |
| 200         | Success                                                 |
| 400         | Bad Request - Invalid parameters or request format      |
| 401         | Unauthorized - Invalid or missing API key               |
| 404         | Not Found - Resource does not exist                     |
| 429         | Too Many Requests - Rate limit exceeded                 |
| 500         | Internal Server Error - Something went wrong on our end |

## Rate Limiting

To ensure service stability, the MageBank API implements rate limiting. If you exceed the limits, you'll receive a `429 Too Many Requests` response. Standard limits are:

-   100 requests per minute per API key
-   5,000 requests per day per API key

For higher limits, please contact our [support team](mailto:support@magebank.ai).

## Support

If you have any questions or need assistance with the API, you can:

-   Email us at [support@magebank.ai](mailto:support@magebank.ai)
-   Visit the [Dashboard](https://www.magebank.ai/dashboard) to manage your account and view logs



================================================
FILE: mcp-and-a2a.mdx
================================================
---
title: 'MCP and A2A Compatibility'
description: 'How MageBank integrates with Multi-Agent Communication Protocol and Agent-to-Agent frameworks'
icon: 'network-wired'
---

# MCP and A2A Compatibility

MageBank is built from the ground up to be compatible with emerging multi-agent frameworks and protocols, providing the financial infrastructure needed for the agent economy to flourish.

## Native Integration with Agent Frameworks

<Tip>
  Mage is fully compatible with **MCP servers** and **Google's Agent-to-Agent (A2A)** framework, bringing the missing economic collaboration layer among multi-agentic systems.
</Tip>

## What This Means For Developers

By integrating with MCP and A2A frameworks, MageBank enables:

### 1. Seamless Economic Transactions Between Agents

Agents from different systems can transact with each other using a standardized financial protocol, allowing for:

- **Cross-framework payments**: Agents running on different frameworks can send and receive payments
- **Standardized value exchange**: Common financial language for multi-agent ecosystems
- **Transaction verification**: Secure and auditable payment trails between agent systems

### 2. Financial Autonomy for Agent Networks

With MageBank as the financial backbone:

- **Autonomous payments**: Agents can independently initiate and complete financial transactions
- **Programmable payment rules**: Define complex payment logic for agent-driven workflows
- **Spend controls and limits**: Set appropriate boundaries for agent financial activity

### 3. Integration with Multiple Agent Frameworks

<CardGroup cols={2}>
  <Card title="MCP Servers" icon="server" href="#">
    Full compatibility with Multi-Agent Communication Protocol servers
  </Card>
  <Card title="A2A Framework" icon="robot" href="#">
    Seamless integration with Google's Agent-to-Agent framework
  </Card>
  <Card title="CrewAI" icon="people-group" href="#">
    Support for CrewAI agent collaboration systems
  </Card>
  <Card title="OpenAI Assistants" icon="square-code" href="#">
    Compatible with OpenAI Assistant-based agent networks
  </Card>
</CardGroup>

## Technical Integration

MageBank's integration with MCP and A2A frameworks is accomplished through our comprehensive API endpoints:

### MCP Integration Example

```javascript
// Example of integrating MageBank with an MCP server
// Using direct API calls instead of an SDK

// Set up an MCP server that can process payments via MageBank
async function setupMCPPaymentProcessor(apiKey) {
  // Register payment capabilities with MCP server
  const paymentService = {
    name: "payment_service",
    description: "Process payments via MageBank API",
    methods: {
      // Define payment method that MCP can call
      "process_payment": async (sender, receiver, amount, currency = "USDC") => {
        // Call MageBank API to register a payment
        const response = await fetch('https://api.magebank.ai/payments/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify({
            senderagentid: sender,
            receiveragentid: receiver,
            paymentdetails: {
              amount: amount,
              currency: currency,
              method: "CRYPTO_ADDRESS"
            },
            name: `Payment from ${sender} to ${receiver}`,
            type: "EXTERNAL"
          })
        });
        
        return await response.json();
      }
    }
  };
  
  // Return the payment service for MCP server registration
  return paymentService;
}
```

### A2A Integration Example

```javascript
// Example of integrating MageBank with Google's A2A framework
// This example shows how a financial agent could advertise payment capabilities via A2A

// Define an A2A Agent Card with MageBank payment capabilities
const agentCard = {
  "name": "MageBank Payment Agent",
  "description": "Agent for processing payments and financial transactions",
  "version": "1.0.0",
  "skills": [
    {
      "name": "process_payment",
      "description": "Process a payment between agents or external accounts",
      "parameters": {
        "type": "object",
        "properties": {
          "sender": { "type": "string", "description": "Sender agent ID" },
          "receiver": { "type": "string", "description": "Receiver agent ID or wallet address" },
          "amount": { "type": "number", "description": "Payment amount" },
          "currency": { "type": "string", "description": "Currency code (default: USDC)" }
        },
        "required": ["sender", "receiver", "amount"]
      }
    },
    {
      "name": "check_balance",
      "description": "Check available balance for an agent",
      "parameters": {
        "type": "object",
        "properties": {
          "agentId": { "type": "string", "description": "Agent ID to check balance for" }
        },
        "required": ["agentId"]
      }
    }
  ],
  "supportedModes": ["text", "structured"],
  "authentication": {
    "required": true,
    "type": "apiKey"
  }
};

// Handle incoming A2A task requests
async function handleA2ATask(task, apiKey) {
  if (task.skill === "process_payment") {
    const params = task.parameters;
    
    // Call MageBank API to process payment
    const response = await fetch('https://api.magebank.ai/payments/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': apiKey
      },
      body: JSON.stringify({
        senderagentid: params.sender,
        receiveragentid: params.receiver,
        paymentdetails: {
          amount: params.amount,
          currency: params.currency || "USDC",
          method: "CRYPTO_ADDRESS"
        },
        name: `A2A Payment: ${params.sender} to ${params.receiver}`,
        type: "EXTERNAL"
      })
    });
    
    const result = await response.json();
    return {
      status: "completed",
      result: {
        success: result.status !== "error",
        paymentId: result.id,
        message: result.message || result.error
      }
    };
  }
  
  if (task.skill === "check_balance") {
    // Call MageBank API to get agent balance
    const response = await fetch(`https://api.magebank.ai/agentsWith/${task.parameters.agentId}`, {
      headers: {
        'x-api-key': apiKey
      }
    });
    
    const agent = await response.json();
    return {
      status: "completed",
      result: {
        agentId: agent.id,
        balance: agent.balance,
        currency: agent.currency
      }
    };
  }
  
  return {
    status: "failed",
    error: "Unsupported skill requested"
  };
}
```

## Getting Started

To begin integrating MageBank with your MCP or A2A implementation:

1. [Get your API key](/user-guide/get-api-key)
2. [Register your first agent](/user-guide/register-agent)
3. Explore our [API Reference](/api-reference/introduction) for integration details
4. Install our SDK for your preferred agent framework

<Note>
  Our developer team is available to assist with integration questions specific to your MCP or A2A implementation. Contact us at [developers@magebank.ai](mailto:developers@magebank.ai).
</Note>


================================================
FILE: api-reference/introduction.mdx
================================================
---
title: 'API Introduction'
description: 'Overview of the MageBank API for AI-Driven Financial Agents'
---

The MageBank API enables developers to integrate AI-driven financial agent functionality into their applications. This section provides a comprehensive reference for all available endpoints.

## API Base URL

All API endpoints are accessible at:

```
https://api.magebank.ai
```

## Authentication

Every API request must include your API key in the `x-api-key` header:

```bash
x-api-key: YOUR_API_KEY
```

<Note>
  To get your API key, visit the [MageBank Dashboard](https://www.magebank.ai/dashboard) and navigate to the "Integrate Agent" section.
</Note>

## API Endpoints

The MageBank API is organized into the following categories:

<CardGroup cols={2}>
  <Card title="Agents" icon="robot" href="/api-reference/agents/introduction">
    Create and manage AI financial agents
  </Card>
  <Card title="Wallets" icon="wallet" href="/api-reference/wallets/introduction">
    Manage wallet addresses and balances
  </Card>
  <Card title="Transactions" icon="exchange" href="/api-reference/transactions/introduction">
    View and manage on-chain transactions
  </Card>
  <Card title="Investments" icon="chart-line" href="/api-reference/investments/introduction">
    Interest rate information and calculations
  </Card>
  <Card title="Payments" icon="credit-card" href="/api-reference/payments/introduction">
    Process payments between agents and external accounts
  </Card>
  <Card title="Users" icon="user" href="/api-reference/users/introduction">
    User account management
  </Card>
  <Card title="Savings" icon="piggy-bank" href="/api-reference/savings/introduction">
    Interest-bearing savings accounts
  </Card>
</CardGroup>

## Response Format

All API responses are returned in JSON format. Successful responses typically include:

```json
{
  "success": true,
  "... additional data fields ..."
}
```

## Error Handling

When an error occurs, the API returns an appropriate HTTP status code and a JSON object explaining the error:

```json
{
  "error": "Descriptive error message"
}
```

Common HTTP status codes:

| Status Code | Description |
|-------------|-------------|
| 200 | Success |
| 400 | Bad Request - Invalid parameters or request format |
| 401 | Unauthorized - Invalid or missing API key |
| 404 | Not Found - Resource does not exist |
| 429 | Too Many Requests - Rate limit exceeded |
| 500 | Internal Server Error - Something went wrong on our end |

## Pagination

For endpoints that return lists of resources, pagination is supported through the following query parameters:

- `page`: Page number (starts at 1)
- `limit`: Number of items per page (default: 20, max: 100)

Example:

```
GET https://api.magebank.ai/user/payments?page=2&limit=50
```

## Rate Limiting

To ensure service stability, API requests are rate-limited to:

- 100 requests per minute per API key
- 5,000 requests per day per API key

If you exceed these limits, you'll receive a `429 Too Many Requests` status code. The response headers include information about your current rate limit status:

- `X-RateLimit-Limit`: The maximum number of requests allowed in the current time window
- `X-RateLimit-Remaining`: The number of requests remaining in the current time window
- `X-RateLimit-Reset`: The time when the current rate limit window resets (Unix timestamp)

## Explore the API

Explore the various endpoints through the interactive API playground available in each endpoint's documentation. You can test requests directly and see responses in real-time.

## API Versioning

The current API version is v1. When breaking changes are introduced, we'll release a new version and provide migration guides. To ensure compatibility, you can specify the API version in your requests:

```
https://api.magebank.ai/v1/agents
```

The current version (v1) is used by default if no version is specified.

## Support

If you encounter any issues or have questions about the API, reach out to our support team at [support@magebank.ai](mailto:support@magebank.ai).


================================================
FILE: api-reference/openapi.json
================================================
{
    "openapi": "3.0.0",
    "info": {
      "title": "Mage Bank - API for AI-Driven Financial Agents",
      "version": "1.0.0",
      "description": "API for managing crypto wallet and agent banking operations",
      "contact": {
        "email": "support@magebank.com"
      }
    },
    "tags": [
      {
        "name": "Agents",
        "description": "Operations related to agent management"
      },
      {
        "name": "Wallets",
        "description": "Operations related to wallet management"
      },
      {
        "name": "Transactions",
        "description": "Operations related to transaction handling"
      },
      {
        "name": "Investment",
        "description": "Operations related to Investment handling"
      },
      {
        "name": "Payments",
        "description": "Operations related to Payment handling"
      },
      {
        "name": "Users",
        "description": "Operations related to User management"
      },
      {
        "name": "Savings",
        "description": "Operations related to Savings management"
      }
    ],
    "components": {
      "schemas": {
        "Agent": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique agent identifier in short ID format",
              "example": "agent_k77NTwxp2Ym3JCmVsKtXQA"
            },
            "name": {
              "type": "string",
              "description": "Name of the agent",
              "example": "Payment Assistant"
            },
            "description": {
              "type": "string",
              "description": "Purpose and functionality of the agent",
              "example": "Handles payment processing for customer support"
            },
            "status": {
              "type": "string",
              "description": "Current status of the agent",
              "enum": [
                "active",
                "inactive",
                "paused"
              ],
              "example": "active"
            },
            "walletAddress": {
              "type": "string",
              "description": "Serialized wallet address in string format",
              "example": "WalletAddress{ addressId: '0x9d20dE668c8F9fb431cf6D6BBA48ee60Fe8E2BAB', networkId: 'base-sepolia', walletId: '07f490dc-34e3-447f-9972-df2778fcb3c3' }"
            },
            "balance": {
              "type": "string",
              "description": "Current balance of the agent's wallet",
              "example": "100"
            },
            "currency": {
              "type": "string",
              "description": "Currency type used by the agent",
              "default": "USDC",
              "example": "USDC"
            },
            "paymentRules": {
              "type": "object",
              "properties": {
                "dailyLimit": {
                  "type": "number",
                  "description": "Maximum amount that can be spent per day",
                  "example": 1000
                },
                "transactionLimit": {
                  "type": "number",
                  "description": "Maximum amount for a single transaction",
                  "example": 100
                },
                "requireApprovalForAll": {
                  "type": "boolean",
                  "description": "Whether all transactions require approval",
                  "example": false
                },
                "requireApprovalAboveAmount": {
                  "type": "number",
                  "description": "Transactions above this amount require approval",
                  "example": 50
                }
              }
            },
            "tags": {
              "type": "array",
              "description": "Categories or labels assigned to the agent",
              "items": {
                "type": "string"
              },
              "example": [
                "customer-support",
                "payments"
              ]
            },
            "created": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when the agent was created",
              "example": "2025-04-15T11:00:08.432269+00:00"
            }
          }
        },
        "Transaction": {
          "type": "object",
          "properties": {
            "txHash": {
              "type": "string",
              "description": "Transaction hash on the blockchain",
              "example": "0x123...abc"
            },
            "status": {
              "type": "string",
              "description": "Current status of the transaction",
              "enum": [
                "pending",
                "completed",
                "failed"
              ],
              "example": "completed"
            },
            "amount": {
              "type": "string",
              "description": "Amount transferred in the transaction",
              "example": "50"
            },
            "currency": {
              "type": "string",
              "description": "Currency used in the transaction",
              "example": "USDC"
            },
            "from_wallet": {
              "type": "string",
              "description": "Sender wallet address",
              "example": "0xa55B42bA7B639bB9CEc2dB2520aC8Cff588895f6"
            },
            "to_wallet": {
              "type": "string",
              "description": "Recipient wallet address",
              "example": "0xb66C42bA7B639bB9CEc2dB2520aC8Cff588895f6"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "When the transaction occurred",
              "example": "2025-05-03T18:52:39.911685+00:00"
            }
          }
        },
        "Savings": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique investment identifier in short ID format",
              "example": "inv_k77NTwxp2Ym3JCmVsKtXQA"
            },
            "agent_id": {
              "type": "string",
              "description": "ID of the agent associated with this investment",
              "example": "agent_k77NTwxp2Ym3JCmVsKtXQA"
            },
            "amount": {
              "type": "number",
              "description": "Principal amount invested",
              "example": 1000
            },
            "invested_at": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when the investment was created",
              "example": "2025-04-15T11:00:08.432269+00:00"
            },
            "status": {
              "type": "string",
              "description": "Current status of the investment",
              "enum": [
                "active",
                "completed",
                "cancelled"
              ],
              "example": "active"
            },
            "current_value": {
              "type": "string",
              "description": "Current value of the investment including earned interest",
              "example": "1050.00"
            },
            "interest_earned": {
              "type": "string",
              "description": "Interest earned on the investment to date",
              "example": "50.00"
            }
          }
        },
        "SavingsDashboard": {
          "type": "object",
          "properties": {
            "totalSavings": {
              "type": "number",
              "description": "Total current value of all investments including interest",
              "example": 1500.75
            },
            "interestRate": {
              "type": "number",
              "description": "Current interest rate applied to investments",
              "example": 5
            },
            "totalInvested": {
              "type": "number",
              "description": "Total principal amount invested by the user",
              "example": 1000
            },
            "yearProjection": {
              "type": "number",
              "description": "Projected value of investments after one year at current rate",
              "example": 1050
            },
            "agents": {
              "type": "array",
              "description": "Detailed information about investments by agent",
              "items": {
                "type": "object",
                "properties": {
                  "agent": {
                    "type": "string",
                    "description": "Name of the agent",
                    "example": "Payment Assistant"
                  },
                  "investment_id": {
                    "type": "string",
                    "description": "Investment ID in short format",
                    "example": "inv_k77NTwxp2Ym3JCmVsKtXQA"
                  },
                  "totalBalance": {
                    "type": "number",
                    "description": "Total balance including investment value",
                    "example": 1200.5
                  },
                  "investedAmount": {
                    "type": "number",
                    "description": "Principal amount invested",
                    "example": 1000
                  },
                  "currentValue": {
                    "type": "number",
                    "description": "Current value with interest",
                    "example": 1200.5
                  },
                  "interest": {
                    "type": "number",
                    "description": "Interest earned to date",
                    "example": 200.5
                  },
                  "current": {
                    "type": "number",
                    "description": "Current balance in agent's account",
                    "example": 1000
                  },
                  "daysInvested": {
                    "type": "number",
                    "description": "Days the investment has been active",
                    "example": 365
                  }
                }
              }
            }
          }
        },
        "InterestRate": {
          "type": "object",
          "properties": {
            "interestRate": {
              "type": "number",
              "description": "Current annual interest rate for investments",
              "example": 4.5
            },
            "lastUpdated": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when the interest rate was last updated",
              "example": "2025-05-04T12:00:00.000Z"
            }
          }
        },
        "InterestCalculation": {
          "type": "object",
          "properties": {
            "principal": {
              "type": "number",
              "description": "Principal amount for the calculation",
              "example": 1000
            },
            "days": {
              "type": "number",
              "description": "Investment duration in days",
              "example": 365
            },
            "interestRate": {
              "type": "number",
              "description": "Annual interest rate applied to the calculation",
              "example": 4.5
            },
            "interestEarned": {
              "type": "string",
              "description": "Interest amount earned over the period",
              "example": "45.00"
            },
            "totalAmount": {
              "type": "string",
              "description": "Total amount including principal and interest",
              "example": "1045.00"
            },
            "annualYield": {
              "type": "string",
              "description": "Effective annual yield as a percentage",
              "example": "4.50%"
            },
            "calculation": {
              "type": "object",
              "description": "Details of the calculation steps",
              "properties": {
                "formula": {
                  "type": "string",
                  "description": "Formula used for calculation",
                  "example": "principal × rate × (days ÷ 365)"
                },
                "steps": {
                  "type": "array",
                  "description": "Step-by-step calculation process",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "1000 × 0.045 × 365/365",
                    "1000 × 0.045 × 1.000000",
                    "1000 × 0.045000",
                    "45.000000"
                  ]
                }
              }
            }
          }
        },
        "WalletBalance": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Whether the operation was successful",
              "example": true
            },
            "balance": {
              "type": "string",
              "description": "Current wallet balance",
              "example": "100.50"
            },
            "asset": {
              "type": "string",
              "description": "Asset type (cryptocurrency)",
              "example": "USDC"
            },
            "message": {
              "type": "string",
              "description": "Additional information about the balance retrieval",
              "example": "Balance retrieved successfully"
            },
            "source": {
              "type": "string",
              "description": "Source of the balance information",
              "example": "blockchain"
            }
          }
        },
        "Payment": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique payment identifier in short ID format",
              "example": "payee_wDG5cavUCoK53uvFzTvkey"
            },
            "name": {
              "type": "string",
              "description": "Name or description of the payment",
              "example": "Vendor XYZ Payment"
            },
            "type": {
              "type": "string",
              "description": "Type of payment (External or Internal)",
              "enum": [
                "EXTERNAL",
                "INTERNAL"
              ],
              "example": "EXTERNAL"
            },
            "senderagentid": {
              "type": "string",
              "description": "ID of the agent sending the payment",
              "example": "agent_eC6ZezevNsqxvoKmQrUuoU"
            },
            "receiveragentid": {
              "type": "string",
              "description": "ID of the agent receiving the payment",
              "example": "agent_k77NTwxp2Ym3JCmVsKtXQA"
            },
            "status": {
              "type": "string",
              "description": "Current status of the payment",
              "enum": [
                "New",
                "Confirmed",
                "Completed",
                "Failed"
              ],
              "example": "New"
            },
            "approvalstatus": {
              "type": "string",
              "description": "Approval status of the payment",
              "example": "Approved, Declined, Pending, Waiting, Waiting for Sender Approval"
            },
            "approvalrequired": {
              "type": "boolean",
              "description": "Whether this payment requires approval",
              "example": true
            },
            "paymentdetails": {
              "type": "object",
              "properties": {
                "method": {
                  "type": "string",
                  "description": "Payment method used",
                  "example": "CRYPTO_ADDRESS"
                },
                "amount": {
                  "type": "number",
                  "description": "Payment amount",
                  "example": 6
                },
                "currency": {
                  "type": "string",
                  "description": "Payment currency",
                  "example": "USDC"
                }
              }
            },
            "contactdetails": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Contact email for the payment recipient",
                  "example": "contact@vendorxyz.com"
                },
                "phoneNumber": {
                  "type": "string",
                  "description": "Contact phone number for the payment recipient",
                  "example": "+1234567890"
                }
              }
            },
            "tags": {
              "type": "array",
              "description": "Tags or categories for the payment",
              "items": {
                "type": "string"
              },
              "example": [
                "vendor",
                "regular"
              ]
            },
            "createdat": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when the payment was created",
              "example": "2025-04-17T10:28:18.512792+00:00"
            },
            "approvedat": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when the payment was approved/declined",
              "example": "2025-04-17T11:30:00.000000+00:00"
            }
          }
        },
        "PaymentResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique payment identifier in short ID format",
              "example": "payee_wDG5cavUCoK53uvFzTvkey"
            },
            "name": {
              "type": "string",
              "description": "Name or description of the payment",
              "example": "Vendor XYZ2"
            },
            "type": {
              "type": "string",
              "description": "Type of payment (External or Internal)",
              "example": "External"
            },
            "status": {
              "type": "string",
              "description": "Current status of the payment",
              "example": "New"
            },
            "createdat": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when the payment was created",
              "example": "2025-04-17T10:28:18.512792"
            },
            "approvalRequired": {
              "type": "boolean",
              "description": "Whether this payment requires approval",
              "example": true
            }
          }
        },
        "PaymentWithDirection": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Payment"
            },
            {
              "type": "object",
              "properties": {
                "initiatedBy": {
                  "type": "string",
                  "description": "Name of the agent that initiated the payment",
                  "example": "Alice"
                },
                "receivedBy": {
                  "type": "string",
                  "description": "Name of the agent that received the payment",
                  "example": "Bob"
                },
                "direction": {
                  "type": "string",
                  "description": "Direction of the payment relative to the user's agents",
                  "enum": [
                    "incoming",
                    "outgoing"
                  ],
                  "example": "outgoing"
                }
              }
            }
          ]
        },
        "Error": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string",
              "description": "Error message",
              "example": "Internal Server Error"
            }
          }
        }
      },
      "responses": {
        "NotFound": {
          "description": "The specified resource was not found",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              },
              "example": {
                "error": "Resource not found"
              }
            }
          }
        },
        "BadRequest": {
          "description": "Invalid request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              },
              "example": {
                "error": "Invalid request parameters"
              }
            }
          }
        },
        "InternalError": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              },
              "example": {
                "error": "Internal Server Error"
              }
            }
          }
        },
        "Unauthorized": {
          "description": "Authentication required",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              },
              "example": {
                "error": "Invalid or missing API key"
              }
            }
          }
        },
        "default": {
          "description": "Unexpected error",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Error" }
            }
          }
        }
      },
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        },
        "ApiKeyAuth": {
          "type": "apiKey",
          "in": "header",
          "name": "x-api-key"
        }
      }
    },
    "security": [
      {
        "ApiKeyAuth": []
      }
    ],
    "paths": {
      "/agentsWith/{id}": {
        "get": {
          "tags": [
            "Agents"
          ],
          "summary": "Fetch details of a specific agent",
          "description": "Returns detailed information about a specific agent based on the provided agent ID.",
          "operationId": "getAgentById",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Agent ID (can be a short ID like agent_xxx)",
              "example": "agent_k77NTwxp2Ym3JCmVsKtXQA"
            }
          ],
          "responses": {
            "200": {
              "description": "Agent details successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Agent"
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/agents/create": {
        "post": {
          "tags": [
            "Agents"
          ],
          "summary": "Create a new agent and fund its wallet",
          "description": "Creates a new agent, generates a wallet, and optionally funds the agent's wallet from the user's wallet. The operation includes: 1. Creation of a new agent record 2. Generation of a secure blockchain wallet 3. Faucet funding of the wallet (on supported test networks) 4. Optional transfer of funds from user's wallet\n",
          "operationId": "createAgent",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "userid",
                    "name"
                  ],
                  "properties": {
                    "userid": {
                      "type": "string",
                      "description": "ID of the user creating the agent",
                      "example": "user_piXARPaD2jefNBGxzb84Qd"
                    },
                    "walletaddress": {
                      "type": "string",
                      "description": "User's wallet address for funding (optional)",
                      "example": "0xa55B42bA7B639bB9CEc2dB2520aC8Cff588895f6"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the agent",
                      "example": "Payment Assistant"
                    },
                    "description": {
                      "type": "string",
                      "description": "Purpose and functionality of the agent",
                      "example": "Handles payment processing for customer support"
                    },
                    "balance": {
                      "type": "integer",
                      "description": "Initial balance to fund the agent (in smallest units)",
                      "example": 6
                    },
                    "dailylimit": {
                      "type": "integer",
                      "description": "Maximum amount that can be spent per day",
                      "example": 1000
                    },
                    "transactionlimit": {
                      "type": "integer",
                      "description": "Maximum amount for a single transaction",
                      "example": 100
                    },
                    "currency": {
                      "type": "string",
                      "description": "Currency type to use (defaults to USDC)",
                      "default": "USDC",
                      "example": "USDC"
                    },
                    "requireapprovalforall": {
                      "type": "boolean",
                      "description": "Whether all transactions require approval",
                      "default": false,
                      "example": false
                    },
                    "requireapprovalaboveamount": {
                      "type": "integer",
                      "description": "Transactions above this amount require approval",
                      "example": 50
                    },
                    "tags": {
                      "type": "array",
                      "description": "Categories or labels to assign to the agent",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "customer-support",
                        "payments"
                      ]
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Agent created and funded successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "agent_bRSEFnMRD1fvkMM39hzPdM"
                      },
                      "apikey": {
                        "type": "string",
                        "example": "mag_eJwVyN0OgiAYANA3cprT1qV_tY8E0jCVuyILSMtNG-LTt87l6SySt4NQVCGoVvCIggneZSASCOE1NpcE7ZzOopH_Q1c-12A4K4e8zgxnMJM0sjjxFE3xJmc4wDUsre4lGUpJzzDB0Mt7AiFmwiUaAppin1ijeCMN6M9C1mKD12ihTPiPwjkNZXQPme6DbGlNBc9aPfcCbb_dMRb2MbE-vqIKzdgtfgVGPxc"
                      },
                      "name": {
                        "type": "string",
                        "example": "Payment Assistant"
                      },
                      "description": {
                        "type": "string",
                        "example": "Handles payment processing for customer support"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "active",
                          "inactive",
                          "paused"
                        ],
                        "example": "active"
                      },
                      "walletAddress": {
                        "type": "object",
                        "properties": {
                          "addressId": {
                            "type": "string",
                            "example": ""
                          },
                          "networkId": {
                            "type": "string",
                            "example": "base-sepolia"
                          },
                          "walletId": {
                            "type": "string",
                            "example": ""
                          }
                        }
                      },
                      "balance": {
                        "type": "string",
                        "example": "6"
                      },
                      "currency": {
                        "type": "string",
                        "example": "USDC"
                      },
                      "paymentRules": {
                        "type": "object",
                        "properties": {
                          "dailyLimit": {
                            "type": "integer",
                            "example": 1000
                          },
                          "transactionLimit": {
                            "type": "integer",
                            "example": 100
                          },
                          "requireApprovalAboveAmount": {
                            "type": "integer",
                            "example": 50
                          },
                          "requireApprovalForAll": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "customer-support",
                          "payments"
                        ]
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-03T18:52:39.911685+00:00"
                      },
                      "transferResult": {
                        "type": "object",
                        "properties": {
                          "success": {
                            "type": "boolean",
                            "example": true
                          },
                          "txHash": {
                            "type": "string",
                            "example": "0x123...abc"
                          },
                          "message": {
                            "type": "string",
                            "example": "Successfully transferred 6 USDC from user to agent wallet"
                          }
                        }
                      },
                      "faucetTransaction": {
                        "type": "object",
                        "properties": {
                          "success": {
                            "type": "boolean",
                            "example": true
                          },
                          "txHash": {
                            "type": "string",
                            "example": "0xabc...123"
                          },
                          "message": {
                            "type": "string",
                            "example": "ETH testnet funds received via faucet"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Agent created, but funding transfer failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "agent_bRSEFnMRD1fvkMM39hzPdM"
                      },
                      "warning": {
                        "type": "string",
                        "example": "Agent created successfully, but funding transfer failed. Please try funding the agent manually."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "examples": {
                    "missingName": {
                      "value": {
                        "error": "Agent name is required"
                      }
                    },
                    "invalidBalance": {
                      "value": {
                        "error": "Invalid balance amount"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/agents/{id}": {
        "get": {
          "tags": [
            "Agents"
          ],
          "summary": "Fetch all agents for a user",
          "description": "Returns an array of agents assigned to the user based on the provided user ID.",
          "operationId": "getUserAgents",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "User ID (can be a short ID like user_xxx)",
              "example": "user_piXARPaD2jefNBGxzb84Qd"
            }
          ],
          "responses": {
            "200": {
              "description": "List of agents successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Agent"
                    }
                  }
                }
              }
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/agents/deposit": {
        "post": {
          "tags": [
            "Agents",
            "Transactions"
          ],
          "summary": "Deposit funds into an agent's wallet",
          "description": "Transfers funds from the user's wallet to the specified agent's wallet. The operation includes: 1. Verification of user and agent existence 2. Validation of deposit amount 3. Transfer of funds on blockchain 4. Update of agent balance in database 5. Creation of transaction record\n",
          "operationId": "depositToAgent",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "userid",
                    "agentid",
                    "amount"
                  ],
                  "properties": {
                    "userid": {
                      "type": "string",
                      "description": "ID of the user initiating the deposit",
                      "example": "user_piXARPaD2jefNBGxzb84Qd"
                    },
                    "agentid": {
                      "type": "string",
                      "description": "ID of the agent receiving the deposit",
                      "example": "agent_k77NTwxp2Ym3JCmVsKtXQA"
                    },
                    "amount": {
                      "type": "number",
                      "description": "Amount to deposit",
                      "example": 50
                    },
                    "currency": {
                      "type": "string",
                      "description": "Currency type to deposit (defaults to USDC)",
                      "default": "USDC",
                      "example": "USDC"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Funds deposited successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "txHash": {
                        "type": "string",
                        "example": "0x123...abc"
                      },
                      "message": {
                        "type": "string",
                        "example": "Successfully deposited 50 USDC to agent"
                      },
                      "updatedBalance": {
                        "type": "string",
                        "example": "150"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "examples": {
                    "missingParams": {
                      "value": {
                        "error": "userid, agentid, and amount are required."
                      }
                    },
                    "invalidAmount": {
                      "value": {
                        "error": "Invalid deposit amount"
                      }
                    },
                    "walletNotFound": {
                      "value": {
                        "error": "User wallet not found or inaccessible"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "500": {
              "description": "Transaction failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "error": {
                        "type": "string",
                        "example": "Transfer failed on-chain: insufficient funds"
                      }
                    }
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/agents/withdraw": {
        "post": {
          "tags": [
            "Agents",
            "Transactions"
          ],
          "summary": "Withdraw funds from an agent's wallet",
          "description": "Transfers funds from the agent's wallet to the user's wallet. The operation includes: 1. Verification of user and agent existence 2. Validation of withdrawal amount against available balance 3. Transfer of funds on blockchain 4. Update of agent balance in database 5. Creation of transaction record\n",
          "operationId": "withdrawFromAgent",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "userid",
                    "agentid",
                    "amount"
                  ],
                  "properties": {
                    "userid": {
                      "type": "string",
                      "description": "ID of the user receiving the withdrawal",
                      "example": "user_piXARPaD2jefNBGxzb84Qd"
                    },
                    "agentid": {
                      "type": "string",
                      "description": "ID of the agent sending the funds",
                      "example": "agent_k77NTwxp2Ym3JCmVsKtXQA"
                    },
                    "amount": {
                      "type": "number",
                      "description": "Amount to withdraw",
                      "example": 50
                    },
                    "currency": {
                      "type": "string",
                      "description": "Currency type to withdraw (defaults to USDC)",
                      "default": "USDC",
                      "example": "USDC"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Funds withdrawn successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "txHash": {
                        "type": "string",
                        "example": "0x123...abc"
                      },
                      "message": {
                        "type": "string",
                        "example": "Successfully withdrew 50 USDC from agent to user"
                      },
                      "updatedBalance": {
                        "type": "string",
                        "example": "50"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "examples": {
                    "missingParams": {
                      "value": {
                        "error": "userid, agentid, and amount are required."
                      }
                    },
                    "invalidAmount": {
                      "value": {
                        "error": "Invalid withdraw amount"
                      }
                    },
                    "insufficientBalance": {
                      "value": {
                        "error": "Insufficient balance"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "500": {
              "description": "Transaction failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "error": {
                        "type": "string",
                        "example": "Transfer failed on-chain"
                      }
                    }
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/investment/interest-rate": {
        "get": {
          "tags": [
            "Investment"
          ],
          "summary": "Get the current interest rate",
          "description": "Retrieves the current annual interest rate for investments and the timestamp when it was last updated. This rate is used for all savings calculations in the platform.\n",
          "operationId": "getCurrentInterestRate",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Interest rate retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InterestRate"
                  }
                }
              }
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/investment/calculator": {
        "post": {
          "tags": [
            "Investment"
          ],
          "summary": "Calculate potential interest",
          "description": "Calculates the potential interest earned for a given investment amount and period. Uses the platform's current interest rate by default, but allows specifying a custom rate for scenario planning. Returns detailed breakdown of the calculation with step-by-step formula application.\n",
          "operationId": "calculateInterest",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "amount",
                    "days"
                  ],
                  "properties": {
                    "amount": {
                      "type": "number",
                      "description": "Principal amount to invest",
                      "example": 1000
                    },
                    "days": {
                      "type": "number",
                      "description": "Investment duration in days",
                      "example": 365
                    },
                    "customRate": {
                      "type": "number",
                      "description": "Optional custom interest rate (annual percentage)",
                      "example": 4.5
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Interest calculation completed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InterestCalculation"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "examples": {
                    "missingParams": {
                      "value": {
                        "success": false,
                        "error": "Amount and days are required"
                      }
                    },
                    "invalidAmount": {
                      "value": {
                        "success": false,
                        "error": "Amount must be a positive number"
                      }
                    },
                    "invalidDays": {
                      "value": {
                        "success": false,
                        "error": "Days must be a positive number"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/payments/setApprove": {
        "post": {
          "tags": [
            "Payments"
          ],
          "summary": "Approve a payment",
          "description": "Updates the approval status of a payment to \"Approved\" and sets the approval timestamp. This allows the payment to proceed to the next stage in the payment flow.\n",
          "operationId": "approvePayment",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "paymentId"
                  ],
                  "properties": {
                    "paymentId": {
                      "type": "string",
                      "description": "The short ID of the payment to approve",
                      "example": "payee_c7m5fdJAfaV3R7VVpWk2MT"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payment approved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Approval Status Done."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/user/payments": {
        "get": {
          "tags": [
            "Payments",
            "Users"
          ],
          "summary": "Get all payments related to the authenticated user's agents",
          "description": "Retrieves a list of payments where either the sender or receiver is one of the authenticated user's agents. Payments are enhanced with additional information: 1. Agent names for both sender and receiver 2. Direction (incoming/outgoing) relative to the user's agents 3. Payment status and creation timestamp\nResults can be optionally filtered by approval status.\n",
          "operationId": "getUserPayments",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "parameters": [
            {
              "in": "query",
              "name": "approvalStatus",
              "schema": {
                "type": "string"
              },
              "required": false,
              "description": "Filter payments by approval status",
              "example": "Approved, Declined, Pending, Waiting, Waiting for Sender Approva"
            }
          ],
          "responses": {
            "200": {
              "description": "List of payments retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PaymentWithDirection"
                    }
                  },
                  "examples": {
                    "outgoing": {
                      "summary": "Outgoing payment example",
                      "value": [
                        {
                          "id": "payee_8tJo7vZb1RKo4oeyWuqgK",
                          "senderagentid": "agent_8tJo7vZb1RKo4oeyWuqgK",
                          "receiveragentid": "agent_7tJo7vZb1RKo4oeyWuqgK",
                          "initiatedBy": "Alice",
                          "receivedBy": "Bob",
                          "direction": "outgoing",
                          "name": "Payment from Alice to Bob",
                          "approvalstatus": "Approved",
                          "createdat": "2025-04-07T12:00:00Z",
                          "type": "EXTERNAL",
                          "paymentdetails": {
                            "method": "CRYPTO_ADDRESS",
                            "amount": 100,
                            "currency": "USDC"
                          }
                        }
                      ]
                    },
                    "incoming": {
                      "summary": "Incoming payment example",
                      "value": [
                        {
                          "id": "payee_9tJo7vZb1RKo4oeyWuqgK",
                          "senderagentid": "agent_7tJo7vZb1RKo4oeyWuqgK",
                          "receiveragentid": "agent_8tJo7vZb1RKo4oeyWuqgK",
                          "initiatedBy": "Bob",
                          "receivedBy": "Alice",
                          "direction": "incoming",
                          "name": "Payment from Bob to Alice",
                          "approvalstatus": "Waiting",
                          "createdat": "2025-04-08T10:00:00Z",
                          "type": "EXTERNAL",
                          "paymentdetails": {
                            "method": "CRYPTO_ADDRESS",
                            "amount": 50,
                            "currency": "USDC"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/payments/{id}": {
        "get": {
          "tags": [
            "Payments"
          ],
          "summary": "Fetch details of a specific payment",
          "description": "Retrieves detailed information about a specific payment based on its ID. Converts short ID format to UUID format internally before querying the database.\n",
          "operationId": "getPaymentById",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Payment ID (can be a short ID like payee_xxx)",
              "example": "payee_8tJo7vZb1RKo4oeyWuqgK"
            }
          ],
          "responses": {
            "200": {
              "description": "Payment details retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/payments/setDecline": {
        "post": {
          "tags": [
            "Payments"
          ],
          "summary": "Decline a payment",
          "description": "Updates the approval status of a payment to \"Decline\" and sets its status to \"Confirmed\". This effectively rejects the payment and prevents it from being processed. The operation also records the timestamp when the payment was declined.\n",
          "operationId": "declinePayment",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "paymentId"
                  ],
                  "properties": {
                    "paymentId": {
                      "type": "string",
                      "description": "The short ID of the payment to decline",
                      "example": "payee_c7m5fdJAfaV3R7VVpWk2MT"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payment declined successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Payment declined successfully"
                      },
                      "status": {
                        "type": "string",
                        "example": "Decline"
                      },
                      "txHash": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "examples": {
                    "missingId": {
                      "value": {
                        "error": "Payment ID is required"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/payments/export": {
        "post": {
          "tags": [
            "Payments"
          ],
          "summary": "Export payments data in various formats",
          "description": "Exports payment data in CSV, XLSX, or PDF format based on the specified date range",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "format"
                  ],
                  "properties": {
                    "format": {
                      "type": "string",
                      "enum": [
                        "csv",
                        "xlsx",
                        "pdf"
                      ],
                      "description": "Export format"
                    },
                    "dateRange": {
                      "type": "object",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date"
                        },
                        "end": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/savings/deposit": {
        "post": {
          "tags": [
            "Savings"
          ],
          "summary": "Deposit savings into an agent's account",
          "description": "Creates a new investment by depositing funds into an agent's savings account. The operation converts the agent ID to UUID format if provided in short format, validates the deposit amount, and creates a new investment record.\n",
          "operationId": "depositSavings",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "agentId",
                    "amount"
                  ],
                  "properties": {
                    "agentId": {
                      "type": "string",
                      "description": "The short ID or UUID of the agent",
                      "example": "agent_k77NTwxp2Ym3JCmVsKtXQA"
                    },
                    "amount": {
                      "type": "number",
                      "description": "Amount to deposit (must be positive)",
                      "example": 100.5
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Deposit completed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Successfully invested 0.5 USDC."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/savings/withdraw": {
        "post": {
          "tags": [
            "Savings"
          ],
          "summary": "Withdraw savings from an investment",
          "description": "Closes an active investment and returns funds to the user's account. The operation validates the investment ID, converts it to UUID format if needed, and processes the withdrawal by updating the investment status.\n",
          "operationId": "withdrawSavings",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "investmentId"
                  ],
                  "properties": {
                    "investmentId": {
                      "type": "string",
                      "description": "The short ID or UUID of the investment",
                      "example": "inv_k77NTwxp2Ym3JCmVsKtXQA"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Withdrawal completed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Withdrawal completed successfully."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/savings/myinvestments": {
        "get": {
          "tags": [
            "Savings"
          ],
          "summary": "Get all active investments for the authenticated user",
          "description": "Retrieves a list of all active investments made by the authenticated user. The response includes details about agents associated with investments, the invested amount, current value (with interest), and investment duration. Interest calculations are based on the central wallet's current interest rate.\n",
          "operationId": "getUserInvestments",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "List of active investments retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "agents": {
                        "type": "array",
                        "description": "List of agents with active investments",
                        "items": {
                          "type": "object",
                          "properties": {
                            "agent": {
                              "type": "string",
                              "description": "Name of the agent",
                              "example": "Payment Assistant"
                            },
                            "totalBalance": {
                              "type": "number",
                              "description": "Total balance including investment value",
                              "example": 1200.5
                            },
                            "investedAmount": {
                              "type": "number",
                              "description": "Principal amount invested",
                              "example": 1000
                            },
                            "currentValue": {
                              "type": "number",
                              "description": "Current value with interest",
                              "example": 1200.5
                            },
                            "interest": {
                              "type": "number",
                              "description": "Interest earned to date",
                              "example": 200.5
                            },
                            "current": {
                              "type": "number",
                              "description": "Current balance in agent's account",
                              "example": 1000
                            },
                            "daysInvested": {
                              "type": "number",
                              "description": "Days the investment has been active",
                              "example": 365
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/savings/dashboard": {
        "get": {
          "tags": [
            "Savings"
          ],
          "summary": "Get savings dashboard data",
          "description": "Provides a comprehensive overview of the user's savings portfolio. Includes total savings, current interest rate, total invested amount, one-year projection, and detailed information about investments by agent. Calculates real-time investment values based on the current interest rate and the exact duration of each investment.\n",
          "operationId": "getSavingsDashboard",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Savings dashboard data retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SavingsDashboard"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/savings/{agentId}": {
        "get": {
          "tags": [
            "Savings"
          ],
          "summary": "Get all investments for a specific agent",
          "description": "Retrieves all investments (both active and completed) associated with a specific agent. For active investments, calculates the current value and interest earned based on the principal amount, interest rate, and investment duration. Returns detailed information including investment status and creation timestamp.\n",
          "operationId": "getAgentInvestments",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "agentId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The short ID or UUID of the agent",
              "example": "agent_k77NTwxp2Ym3JCmVsKtXQA"
            }
          ],
          "responses": {
            "200": {
              "description": "List of investments retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "investments": {
                        "type": "array",
                        "description": "List of investments for the specified agent",
                        "items": {
                          "$ref": "#/components/schemas/Savings"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "500": {
              "$ref": "#/components/responses/InternalError"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/transactions/summary": {
        "get": {
          "tags": [
            "Transactions"
          ],
          "summary": "Get wallet summary for a date range",
          "description": "Provides a summary of financial activity within the specified date range, including total amounts earned (deposits, interest) and spent (withdrawals, payments).\n",
          "operationId": "getTransactionSummary",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "parameters": [
            {
              "in": "query",
              "name": "start_date",
              "schema": {
                "type": "string",
                "format": "date-time"
              },
              "required": true,
              "description": "Start date for summary calculation (ISO format)",
              "example": "2023-05-01T00:00:00Z"
            },
            {
              "in": "query",
              "name": "end_date",
              "schema": {
                "type": "string",
                "format": "date-time"
              },
              "required": true,
              "description": "End date for summary calculation (ISO format)",
              "example": "2023-05-31T23:59:59Z"
            }
          ],
          "responses": {
            "200": {
              "description": "Summary data retrieved successfully"
            },
            "400": {
              "description": "Invalid request parameters"
            },
            "401": {
              "description": "User not authenticated"
            },
            "500": {
              "description": "Internal server error"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      },
      "/user/wallet-balance": {
        "get": {
          "tags": [
            "Users",
            "Wallets"
          ],
          "summary": "Get the authenticated user's wallet balance",
          "description": "Retrieves the user's wallet balance from the blockchain using their wallet address. The endpoint follows a fallback strategy, first attempting to fetch USDC balance, then ETH, and finally any other non-zero balance. Requires authentication with a valid API key.\n",
          "operationId": "getUserWalletBalance",
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Wallet balance retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WalletBalance"
                  },
                  "examples": {
                    "usdcBalance": {
                      "value": {
                        "success": true,
                        "balance": "100.50",
                        "asset": "USDC"
                      }
                    },
                    "ethBalance": {
                      "value": {
                        "success": true,
                        "balance": "0.05",
                        "asset": "ETH"
                      }
                    },
                    "zeroBalance": {
                      "value": {
                        "success": true,
                        "balance": "0.00",
                        "message": "All balance fetching methods failed"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid wallet address format",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "example": {
                    "error": "Invalid wallet address format"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Error" }
                }
              }
            }
          }
        }
      }
    }
  }


================================================
FILE: api-reference/agents/create-agent.mdx
================================================
---
title: 'Create Agent'
api: 'POST /agents/create'
description: 'Create a new agent and fund its wallet'
---

Creates a new agent, generates a wallet, and optionally funds it from the user's wallet.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="userid" type="string" required>
  ID of the user creating the agent
</ParamField>

<ParamField body="walletaddress" type="string">
  User's wallet address for funding (optional)
</ParamField>

<ParamField body="name" type="string" required>
  Name of the agent
</ParamField>

<ParamField body="description" type="string">
  Purpose and functionality of the agent
</ParamField>

<ParamField body="balance" type="integer">
  Initial balance to fund the agent
</ParamField>

<ParamField body="dailylimit" type="integer">
  Maximum amount that can be spent per day
</ParamField>

<ParamField body="transactionlimit" type="integer">
  Maximum amount for a single transaction
</ParamField>

<ParamField body="currency" type="string" default="USDC">
  Currency type to use
</ParamField>

<ParamField body="requireapprovalforall" type="boolean" default="false">
  Whether all transactions require approval
</ParamField>

<ParamField body="requireapprovalaboveamount" type="number">
  Transactions above this amount require approval
</ParamField>

<ParamField body="tags" type="array">
  Categories or labels to assign to the agent
</ParamField>

## Response

<ResponseField name="id" type="string">
  Unique agent identifier in short ID format
</ResponseField>

<ResponseField name="apikey" type="string">
  The API key for authentication
</ResponseField>

<ResponseField name="name" type="string">
  Name of the agent
</ResponseField>

<ResponseField name="description" type="string">
  Purpose and functionality of the agent
</ResponseField>

<ResponseField name="status" type="string">
  Current status of the agent
</ResponseField>

<ResponseField name="walletAddress" type="object">
  <Expandable title="properties">
    <ResponseField name="addressId" type="string">
      The blockchain address associated with the agent
    </ResponseField>
    <ResponseField name="networkId" type="string">
      The blockchain network (e.g., "base-sepolia")
    </ResponseField>
    <ResponseField name="walletId" type="string">
      Internal wallet identifier
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="balance" type="string">
  Initial balance of the agent's wallet
</ResponseField>

<ResponseField name="currency" type="string">
  Currency used by the agent
</ResponseField>

<ResponseField name="paymentRules" type="object">
  <Expandable title="properties">
    <ResponseField name="dailyLimit" type="integer">
      Maximum amount that can be spent per day
    </ResponseField>
    <ResponseField name="transactionLimit" type="integer">
      Maximum amount for a single transaction
    </ResponseField>
    <ResponseField name="requireApprovalForAll" type="boolean">
      Whether all transactions require approval
    </ResponseField>
    <ResponseField name="requireApprovalAboveAmount" type="number">
      Transactions above this amount require approval
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="tags" type="array">
  Categories or labels assigned to the agent
</ResponseField>

<ResponseField name="created" type="string">
  Timestamp when the agent was created
</ResponseField>

<ResponseField name="transferResult" type="object">
  <Expandable title="properties">
    <ResponseField name="success" type="boolean">
      Whether the fund transfer was successful
    </ResponseField>
    <ResponseField name="txHash" type="string">
      Transaction hash on the blockchain
    </ResponseField>
    <ResponseField name="message" type="string">
      Information about the transfer
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="faucetTransaction" type="object">
  <Expandable title="properties">
    <ResponseField name="success" type="boolean">
      Whether the faucet funding was successful
    </ResponseField>
    <ResponseField name="txHash" type="string">
      Transaction hash on the blockchain
    </ResponseField>
    <ResponseField name="message" type="string">
      Information about the faucet funding
    </ResponseField>
  </Expandable>
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/agents/create" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "userid": "user_piXARPaD2jefNBGxzb84Qd",
    "walletaddress": "0xa55B42bA7B639bB9CEc2dB2520aC8Cff588895f6",
    "name": "Payment Assistant",
    "description": "Handles payment processing for customer support",
    "balance": 6,
    "dailylimit": 1000,
    "transactionlimit": 100,
    "currency": "USDC",
    "requireapprovalforall": false,
    "requireapprovalaboveamount": 50.00,
    "tags": ["customer-support", "payments"]
  }'
```

```javascript Node.js
const axios = require('axios');

async function createAgent() {
  try {
    const response = await axios.post('https://api.magebank.ai/agents/create', {
      userid: "user_piXARPaD2jefNBGxzb84Qd",
      walletaddress: "0xa55B42bA7B639bB9CEc2dB2520aC8Cff588895f6",
      name: "Payment Assistant",
      description: "Handles payment processing for customer support",
      balance: 6,
      dailylimit: 1000,
      transactionlimit: 100,
      currency: "USDC",
      requireapprovalforall: false,
      requireapprovalaboveamount: 50.00,
      tags: ["customer-support", "payments"]
    }, {
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Agent created:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error creating agent:', error.response ? error.response.data : error.message);
    throw error;
  }
}

createAgent();
```

```python Python
import requests
import json

def create_agent():
    url = "https://api.magebank.ai/agents/create"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "userid": "user_piXARPaD2jefNBGxzb84Qd",
        "walletaddress": "0xa55B42bA7B639bB9CEc2dB2520aC8Cff588895f6",
        "name": "Payment Assistant",
        "description": "Handles payment processing for customer support",
        "balance": 6,
        "dailylimit": 1000,
        "transactionlimit": 100,
        "currency": "USDC",
        "requireapprovalforall": False,
        "requireapprovalaboveamount": 50.00,
        "tags": ["customer-support", "payments"]
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    if response.status_code == 200:
        agent_data = response.json()
        print("Agent created:", agent_data)
        return agent_data
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

create_agent()
```

</CodeGroup>

## Example Response

```json
{
  "id": "agent_bRSEFnMRD1fvkMM39hzPdM",
  "apikey": "mag_eJwVyN0OgiAYANA3cprT1qV_tY8E0jCVuyILSMtNG-LTt87l6SySt4NQVCGoVvCIggneZSASCOE1NpcE7ZzOopH_Q1c-12A4K4e8zgxnMJM0sjjxFE3xJmc4wDUsre4lGUpJzzDB0Mt7AiFmwiUaAppin1ijeCMN6M9C1mKD12ihTPiPwjkNZXQPme6DbGlNBc9aPfcCbb_dMRb2MbE-vqIKzdgtfgVGPxc",
  "name": "Payment Assistant",
  "description": "Handles payment processing for customer support",
  "status": "active",
  "walletAddress": {
    "addressId": "",
    "networkId": "base-sepolia",
    "walletId": ""
  },
  "balance": "6",
  "currency": "USDC",
  "paymentRules": {
    "dailyLimit": 1000,
    "transactionLimit": 100,
    "requireApprovalAboveAmount": 50.00,
    "requireApprovalForAll": false
  },
  "tags": [
    "customer-support",
    "payments"
  ],
  "created": "2025-05-03T18:52:39.911685+00:00",
  "transferResult": {
    "success": true,
    "txHash": "0x123...abc",
    "message": "Successfully transferred 6 USDC from user to agent wallet"
  },
  "faucetTransaction": {
    "success": true,
    "txHash": "0xabc...123",
    "message": "ETH testnet funds received via faucet"
  }
}
```

## Error Responses

<ResponseExample>
```json 400 Bad Request - Missing Name
{
  "error": "Agent name is required"
}
```

```json 400 Bad Request - Invalid Balance
{
  "error": "Invalid balance amount"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Agent created and funded successfully |
| 201 | Agent created, but funding transfer failed |
| 400 | Bad Request - Invalid or missing parameters |
| 500 | Internal Server Error |

## Notes

- If the wallet funding fails but agent creation succeeds, a 201 status code is returned with a warning message.
- The `balance` parameter specifies the amount to transfer from the user's wallet to the agent's wallet.
- For testnet environments, a faucet transaction may be included to provide gas for transactions.
- Make note of the returned agent ID, as you'll need it for future API calls with this agent.


================================================
FILE: api-reference/agents/deposit.mdx
================================================
---
title: 'Deposit to Agent'
api: 'POST /agents/deposit'
description: "Deposit funds into an agent's wallet"
---

Transfers funds from the user's wallet to the specified agent's wallet. The operation includes:
1. Verification of user and agent existence
2. Validation of deposit amount
3. Transfer of funds on blockchain
4. Update of agent balance in database
5. Creation of transaction record

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="userid" type="string" required>
  ID of the user initiating the deposit
</ParamField>

<ParamField body="agentid" type="string" required>
  ID of the agent receiving the deposit
</ParamField>

<ParamField body="amount" type="number" required>
  Amount to deposit
</ParamField>

<ParamField body="currency" type="string" default="USDC">
  Currency type to deposit
</ParamField>

## Response

<ResponseField name="success" type="boolean">
  Whether the deposit was successful
</ResponseField>

<ResponseField name="txHash" type="string">
  Transaction hash on the blockchain
</ResponseField>

<ResponseField name="message" type="string">
  Information about the deposit
</ResponseField>

<ResponseField name="updatedBalance" type="string">
  New balance of the agent after the deposit
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/agents/deposit" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "userid": "user_piXARPaD2jefNBGxzb84Qd",
    "agentid": "agent_k77NTwxp2Ym3JCmVsKtXQA",
    "amount": 50,
    "currency": "USDC"
  }'
```

```javascript Node.js
const axios = require('axios');

async function depositToAgent(userId, agentId, amount, currency = "USDC") {
  try {
    const response = await axios.post('https://api.magebank.ai/agents/deposit', {
      userid: userId,
      agentid: agentId,
      amount: amount,
      currency: currency
    }, {
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Deposit result:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error depositing to agent:', error.response ? error.response.data : error.message);
    throw error;
  }
}

depositToAgent('user_piXARPaD2jefNBGxzb84Qd', 'agent_k77NTwxp2Ym3JCmVsKtXQA', 50);
```

```python Python
import requests
import json

def deposit_to_agent(user_id, agent_id, amount, currency="USDC"):
    url = "https://api.magebank.ai/agents/deposit"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "userid": user_id,
        "agentid": agent_id,
        "amount": amount,
        "currency": currency
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    if response.status_code == 200:
        result = response.json()
        print("Deposit result:", result)
        return result
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

deposit_to_agent("user_piXARPaD2jefNBGxzb84Qd", "agent_k77NTwxp2Ym3JCmVsKtXQA", 50)
```

</CodeGroup>

## Example Response

```json
{
  "success": true,
  "txHash": "0x123...abc",
  "message": "Successfully deposited 50 USDC to agent",
  "updatedBalance": "150"
}
```

## Error Responses

<ResponseExample>
```json 400 Missing Parameters
{
  "error": "userid, agentid, and amount are required."
}
```

```json 400 Invalid Amount
{
  "error": "Invalid deposit amount"
}
```

```json 400 Wallet Not Found
{
  "error": "User wallet not found or inaccessible"
}
```

```json 404 Not Found
{
  "error": "Agent not found"
}
```

```json 500 Transaction Failed
{
  "success": false,
  "error": "Transfer failed on-chain: insufficient funds"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Funds deposited successfully |
| 400 | Bad Request - Invalid or missing parameters |
| 404 | Not Found - Agent or user not found |
| 500 | Internal Server Error - Transaction failed |

## Notes

- The amount must be a positive number.
- The user must have sufficient funds in their wallet to complete the deposit.
- The transaction may take a few moments to be confirmed on the blockchain.
- The updated balance is returned as a string to preserve precision for financial calculations.
- Both user ID and agent ID can be in either short format or UUID format.


================================================
FILE: api-reference/agents/get-agent.mdx
================================================
---
title: 'Get Agent'
api: 'GET /agentsWith/{id}'
description: 'Fetch details of a specific agent'
---

Retrieve detailed information about a specific agent based on its ID.

## Path Parameters

<ParamField path="id" type="string" required>
  Agent ID in the format `agent_xxx`
</ParamField>

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Response

<ResponseField name="id" type="string">
  Unique agent identifier in short ID format
</ResponseField>

<ResponseField name="name" type="string">
  Name of the agent
</ResponseField>

<ResponseField name="description" type="string">
  Purpose and functionality of the agent
</ResponseField>

<ResponseField name="status" type="string">
  Current status of the agent (active, inactive, paused)
</ResponseField>

<ResponseField name="walletAddress" type="object">
  <Expandable title="properties">
    <ResponseField name="addressId" type="string">
      The blockchain address associated with the agent
    </ResponseField>
    <ResponseField name="networkId" type="string">
      The blockchain network (e.g., "base-sepolia")
    </ResponseField>
    <ResponseField name="walletId" type="string">
      Internal wallet identifier
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="balance" type="string">
  Current balance of the agent's wallet
</ResponseField>

<ResponseField name="currency" type="string">
  Currency used by the agent (default: "USDC")
</ResponseField>

<ResponseField name="paymentRules" type="object">
  <Expandable title="properties">
    <ResponseField name="dailyLimit" type="number">
      Maximum amount that can be spent per day
    </ResponseField>
    <ResponseField name="transactionLimit" type="number">
      Maximum amount for a single transaction
    </ResponseField>
    <ResponseField name="requireApprovalForAll" type="boolean">
      Whether all transactions require approval
    </ResponseField>
    <ResponseField name="requireApprovalAboveAmount" type="number">
      Transactions above this amount require approval
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="tags" type="array">
  Categories or labels assigned to the agent
</ResponseField>

<ResponseField name="created" type="string">
  Timestamp when the agent was created
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X GET "https://api.magebank.ai/agentsWith/agent_k77NTwxp2Ym3JCmVsKtXQA" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getAgent(agentId) {
  try {
    const response = await axios.get(`https://api.magebank.ai/agentsWith/${agentId}`, {
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log('Agent details:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error fetching agent:', error.response ? error.response.data : error.message);
    throw error;
  }
}

getAgent('agent_k77NTwxp2Ym3JCmVsKtXQA');
```

```python Python
import requests

def get_agent(agent_id):
    url = f"https://api.magebank.ai/agentsWith/{agent_id}"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        agent_data = response.json()
        print("Agent details:", agent_data)
        return agent_data
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

get_agent("agent_k77NTwxp2Ym3JCmVsKtXQA")
```

</CodeGroup>

## Example Response

```json
{
  "id": "agent_k77NTwxp2Ym3JCmVsKtXQA",
  "name": "Payment Assistant",
  "description": "Handles payment processing for customer support",
  "status": "active",
  "walletAddress": {
    "addressId": "0x9d20dE668c8F9fb431cf6D6BBA48ee60Fe8E2BAB",
    "networkId": "base-sepolia",
    "walletId": "07f490dc-34e3-447f-9972-df2778fcb3c3"
  },
  "balance": "100",
  "currency": "USDC",
  "paymentRules": {
    "dailyLimit": 1000,
    "transactionLimit": 100,
    "requireApprovalForAll": false,
    "requireApprovalAboveAmount": 50
  },
  "tags": [
    "customer-support",
    "payments"
  ],
  "created": "2025-04-15T11:00:08.432269+00:00"
}
```

## Error Responses

<ResponseExample>
```json 404 Not Found
{
  "error": "Agent not found"
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Notes

- The agent ID can be in the short format (e.g., `agent_k77NTwxp2Ym3JCmVsKtXQA`).
- Balance is returned as a string to preserve precision for financial calculations.


================================================
FILE: api-reference/agents/get-user-agents.mdx
================================================
---
title: 'List User Agents'
api: 'GET /agents/{id}'
description: 'Fetch all agents for a user'
---

Retrieves an array of agents assigned to the user based on the provided user ID.

## Path Parameters

<ParamField path="id" type="string" required>
  User ID in the format `user_xxx`
</ParamField>

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Response

Returns an array of agent objects, each containing:

<ResponseField name="id" type="string">
  Unique agent identifier in short ID format
</ResponseField>

<ResponseField name="name" type="string">
  Name of the agent
</ResponseField>

<ResponseField name="description" type="string">
  Purpose and functionality of the agent
</ResponseField>

<ResponseField name="status" type="string">
  Current status of the agent (active, inactive, paused)
</ResponseField>

<ResponseField name="walletAddress" type="object">
  <Expandable title="properties">
    <ResponseField name="addressId" type="string">
      The blockchain address associated with the agent
    </ResponseField>
    <ResponseField name="networkId" type="string">
      The blockchain network (e.g., "base-sepolia")
    </ResponseField>
    <ResponseField name="walletId" type="string">
      Internal wallet identifier
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="balance" type="string">
  Current balance of the agent's wallet
</ResponseField>

<ResponseField name="currency" type="string">
  Currency used by the agent
</ResponseField>

<ResponseField name="paymentRules" type="object">
  <Expandable title="properties">
    <ResponseField name="dailyLimit" type="number">
      Maximum amount that can be spent per day
    </ResponseField>
    <ResponseField name="transactionLimit" type="number">
      Maximum amount for a single transaction
    </ResponseField>
    <ResponseField name="requireApprovalForAll" type="boolean">
      Whether all transactions require approval
    </ResponseField>
    <ResponseField name="requireApprovalAboveAmount" type="number">
      Transactions above this amount require approval
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="tags" type="array">
  Categories or labels assigned to the agent
</ResponseField>

<ResponseField name="created" type="string">
  Timestamp when the agent was created
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X GET "https://api.magebank.ai/agents/user_piXARPaD2jefNBGxzb84Qd" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getUserAgents(userId) {
  try {
    const response = await axios.get(`https://api.magebank.ai/agents/${userId}`, {
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log('User agents:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error fetching user agents:', error.response ? error.response.data : error.message);
    throw error;
  }
}

getUserAgents('user_piXARPaD2jefNBGxzb84Qd');
```

```python Python
import requests

def get_user_agents(user_id):
    url = f"https://api.magebank.ai/agents/{user_id}"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        agents = response.json()
        print(f"Found {len(agents)} agents for user")
        return agents
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

get_user_agents("user_piXARPaD2jefNBGxzb84Qd")
```

</CodeGroup>

## Example Response

```json
[
  {
    "id": "agent_k77NTwxp2Ym3JCmVsKtXQA",
    "name": "Payment Assistant",
    "description": "Handles payment processing for customer support",
    "status": "active",
    "walletAddress": {
      "addressId": "0x9d20dE668c8F9fb431cf6D6BBA48ee60Fe8E2BAB",
      "networkId": "base-sepolia",
      "walletId": "07f490dc-34e3-447f-9972-df2778fcb3c3"
    },
    "balance": "100",
    "currency": "USDC",
    "paymentRules": {
      "dailyLimit": 1000,
      "transactionLimit": 100,
      "requireApprovalForAll": false,
      "requireApprovalAboveAmount": 50
    },
    "tags": [
      "customer-support",
      "payments"
    ],
    "created": "2025-04-15T11:00:08.432269+00:00"
  },
  {
    "id": "agent_bRSEFnMRD1fvkMM39hzPdM",
    "name": "Marketing Budget",
    "description": "Manages marketing expenses and subscriptions",
    "status": "active",
    "walletAddress": {
      "addressId": "0x8c30dE668c8F9fb431cf6D6BBA48ee60Fe8E1CAB",
      "networkId": "base-sepolia",
      "walletId": "07f490dc-34e3-447f-9972-df2778fcb3c4"
    },
    "balance": "500",
    "currency": "USDC",
    "paymentRules": {
      "dailyLimit": 2000,
      "transactionLimit": 200,
      "requireApprovalForAll": false,
      "requireApprovalAboveAmount": 100
    },
    "tags": [
      "marketing",
      "subscriptions"
    ],
    "created": "2025-04-20T14:30:22.123456+00:00"
  }
]
```

## Error Responses

<ResponseExample>
```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | List of agents successfully retrieved |
| 401 | Unauthorized - Invalid or missing API key |
| 500 | Internal Server Error |

## Notes

- The user ID can be in the short format (e.g., `user_piXARPaD2jefNBGxzb84Qd`).
- If the user has no agents, an empty array will be returned.


================================================
FILE: api-reference/agents/introduction.mdx
================================================
---
title: 'Introduction'
description: 'Create and manage AI financial agents'
---

Agents are the core entities in the MageBank platform. Each agent has its own wallet, balance, and transaction rules. Use the Agents API to create, fund, and manage your AI financial agents.

<Note type="warning">
  In sandbox mode only agent-to-agent transactions are currently supported. Agent-to-bank account, agent-to-businesses, and agent-to-checkout pages are coming soon.
</Note>

## Agent Model

An agent consists of:

- **Identity**: Unique ID, name, and description
- **Financial Details**: Associated wallet address and balance
- **Payment Rules**: Transaction limits and approval requirements 
- **Status**: Current operational status
- **Metadata**: Tags, creation timestamp, and other attributes

Here's an example of the agent data structure:

```json
{
  "id": "agent_k77NTwxp2Ym3JCmVsKtXQA",
  "name": "Payment Assistant",
  "description": "Handles payment processing for customer support",
  "status": "active",
  "walletAddress": {
    "addressId": "0x9d20dE668c8F9fb431cf6D6BBA48ee60Fe8E2BAB",
    "networkId": "base-sepolia",
    "walletId": "07f490dc-34e3-447f-9972-df2778fcb3c3"
  },
  "balance": "100",
  "currency": "USDC",
  "paymentRules": {
    "dailyLimit": 1000,
    "transactionLimit": 100,
    "requireApprovalForAll": false,
    "requireApprovalAboveAmount": 50.00
  },
  "tags": [
    "customer-support",
    "payments"
  ],
  "createdat": "2025-04-15T11:00:08.432269+00:00"
}
```

## Available Endpoints

<CardGroup>
  <Card title="Get Agent" icon="eye" href="/api-reference/agents/get-agent">
    Fetch details of a specific agent
  </Card>
  <Card title="Create Agent" icon="plus" href="/api-reference/agents/create-agent">
    Create a new agent and fund its wallet
  </Card>
  <Card title="List User Agents" icon="list" href="/api-reference/agents/get-user-agents">
    Fetch all agents for a user
  </Card>
  <Card title="Deposit to Agent" icon="arrow-down" href="/api-reference/agents/deposit">
    Deposit funds into an agent's wallet
  </Card>
  <Card title="Withdraw from Agent" icon="arrow-up" href="/api-reference/agents/withdraw">
    Withdraw funds from an agent's wallet
  </Card>
</CardGroup>

## Agent Lifecycle

The typical lifecycle of an agent includes:

1. **Creation**: An agent is created with a name, description, and initial funding
2. **Configuration**: Payment rules are set to control transaction limits and approval requirements
3. **Active Operation**: The agent processes transactions according to its configured rules
4. **Maintenance**: Funds can be added or withdrawn as needed
5. **Status Changes**: An agent's status can be modified as needed

## Payment Rules

Payment rules determine how an agent can spend funds:

- **Daily Limit**: Maximum amount the agent can spend in a 24-hour period
- **Transaction Limit**: Maximum amount for a single transaction
- **Approval Requirements**:
  - `requireApprovalForAll`: When true, all transactions require manual approval
  - `requireApprovalAboveAmount`: Transactions above this amount require approval

## Best Practices

- Create separate agents for different purposes or departments
- Use descriptive names and tags to easily identify agents
- Set appropriate transaction limits based on expected usage patterns
- Consider requiring approval for large transactions to prevent unauthorized spending
- Regularly monitor agent activity to ensure proper operation

## Next Steps

Use the endpoints in this section to create and manage your agents. After creating an agent, you can:

- Process [payments](/api-reference/payments/introduction) between agents
- Set up [savings](/api-reference/savings/introduction) to earn interest on idle funds
- Monitor [transactions](/api-reference/transactions/introduction) for financial activity


================================================
FILE: api-reference/agents/withdraw.mdx
================================================
---
title: 'Withdraw from Agent'
api: 'POST /agents/withdraw'
description: "Withdraw funds from an agent's wallet"
---

Transfers funds from the agent's wallet to the user's wallet. The operation includes:
1. Verification of user and agent existence
2. Validation of withdrawal amount against available balance
3. Transfer of funds on blockchain
4. Update of agent balance in database
5. Creation of transaction record

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="userid" type="string" required>
  ID of the user receiving the withdrawal
</ParamField>

<ParamField body="agentid" type="string" required>
  ID of the agent sending the funds
</ParamField>

<ParamField body="amount" type="number" required>
  Amount to withdraw
</ParamField>

<ParamField body="currency" type="string" default="USDC">
  Currency type to withdraw
</ParamField>

## Response

<ResponseField name="success" type="boolean">
  Whether the withdrawal was successful
</ResponseField>

<ResponseField name="txHash" type="string">
  Transaction hash on the blockchain
</ResponseField>

<ResponseField name="message" type="string">
  Information about the withdrawal
</ResponseField>

<ResponseField name="updatedBalance" type="string">
  New balance of the agent after the withdrawal
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/agents/withdraw" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "userid": "user_piXARPaD2jefNBGxzb84Qd",
    "agentid": "agent_k77NTwxp2Ym3JCmVsKtXQA",
    "amount": 50,
    "currency": "USDC"
  }'
```

```javascript Node.js
const axios = require('axios');

async function withdrawFromAgent(userId, agentId, amount, currency = "USDC") {
  try {
    const response = await axios.post('https://api.magebank.ai/agents/withdraw', {
      userid: userId,
      agentid: agentId,
      amount: amount,
      currency: currency
    }, {
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Withdrawal result:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error withdrawing from agent:', error.response ? error.response.data : error.message);
    throw error;
  }
}

withdrawFromAgent('user_piXARPaD2jefNBGxzb84Qd', 'agent_k77NTwxp2Ym3JCmVsKtXQA', 50);
```

```python Python
import requests
import json

def withdraw_from_agent(user_id, agent_id, amount, currency="USDC"):
    url = "https://api.magebank.ai/agents/withdraw"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "userid": user_id,
        "agentid": agent_id,
        "amount": amount,
        "currency": currency
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    if response.status_code == 200:
        result = response.json()
        print("Withdrawal result:", result)
        return result
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

withdraw_from_agent("user_piXARPaD2jefNBGxzb84Qd", "agent_k77NTwxp2Ym3JCmVsKtXQA", 50)
```

</CodeGroup>

## Example Response

```json
{
  "success": true,
  "txHash": "0x123...abc",
  "message": "Successfully withdrew 50 USDC from agent to user",
  "updatedBalance": "50"
}
```

## Error Responses

<ResponseExample>
```json 400 Missing Parameters
{
  "error": "userid, agentid, and amount are required."
}
```

```json 400 Invalid Amount
{
  "error": "Invalid withdraw amount"
}
```

```json 400 Insufficient Balance
{
  "error": "Insufficient balance"
}
```

```json 404 Not Found
{
  "error": "Agent not found"
}
```

```json 500 Transaction Failed
{
  "success": false,
  "error": "Transfer failed on-chain"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Funds withdrawn successfully |
| 400 | Bad Request - Invalid or missing parameters |
| 404 | Not Found - Agent or user not found |
| 500 | Internal Server Error - Transaction failed |

## Notes

- The amount must be a positive number.
- The agent must have sufficient funds in its wallet to complete the withdrawal.
- The transaction may take a few moments to be confirmed on the blockchain.
- The updated balance is returned as a string to preserve precision for financial calculations.
- Both user ID and agent ID can be in either short format or UUID format.
- Withdrawals bypass the agent's payment rules (daily limit, transaction limit, approval requirements) as they are initiated by the user, not the agent.


================================================
FILE: api-reference/endpoint/create.mdx
================================================
---
title: 'Create Plant'
openapi: 'POST /plants'
---



================================================
FILE: api-reference/endpoint/delete.mdx
================================================
---
title: 'Delete Plant'
openapi: 'DELETE /plants/{id}'
---



================================================
FILE: api-reference/endpoint/get.mdx
================================================
---
title: 'Get Plants'
openapi: 'GET /plants'
---



================================================
FILE: api-reference/endpoint/webhook.mdx
================================================
---
title: 'New Plant'
openapi: 'WEBHOOK /plant/webhook'
---



================================================
FILE: api-reference/payments/approve-payment.mdx
================================================
---
title: 'Approve Payment'
api: 'POST /payments/setApprove'
description: 'Approve a payment that requires authorization'
---

Approves a payment that is waiting for authorization, allowing it to proceed with fund transfer.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="paymentId" type="string" required>
  The short ID of the payment to approve
</ParamField>

## Response

<ResponseField name="message" type="string">
  Confirmation message indicating the approval status has been updated
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/payments/setApprove" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "paymentId": "payee_c7m5fdJAfaV3R7VVpWk2MT"
  }'
```

```javascript Node.js
const axios = require('axios');

async function approvePayment(paymentId) {
  try {
    const response = await axios.post('https://api.magebank.ai/payments/setApprove', {
      paymentId: paymentId
    }, {
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Payment approval result:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error approving payment:', error.response ? error.response.data : error.message);
    throw error;
  }
}

approvePayment('payee_c7m5fdJAfaV3R7VVpWk2MT');
```

```python Python
import requests
import json

def approve_payment(payment_id):
    url = "https://api.magebank.ai/payments/setApprove"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "paymentId": payment_id
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    if response.status_code == 200:
        result = response.json()
        print("Payment approval result:", result)
        return result
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

approve_payment("payee_c7m5fdJAfaV3R7VVpWk2MT")
```

</CodeGroup>

## Example Response

```json
{
  "message": "Approval Status Done."
}
```

## Error Responses

<ResponseExample>
```json 400 Bad Request
{
  "error": "Payment ID is required"
}
```

```json 404 Not Found
{
  "error": "Payment not found"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Payment approved successfully |
| 400 | Bad Request - Missing payment ID |
| 404 | Not Found - Payment not found |
| 500 | Internal Server Error |

## Notes

- Only payments with an approval status of "Waiting for Sender Approval" can be approved.
- Once approved, the payment will be processed on the blockchain.
- The payment's status will change to "New" after approval, then to "Confirmed" once processed.
- Only users with appropriate permissions can approve payments.


================================================
FILE: api-reference/payments/decline-payment.mdx
================================================
---
title: 'Decline Payment'
api: 'POST /payments/setDecline'
description: 'Decline a payment to prevent processing'
---

Updates a payment's status to declined, preventing it from being processed and transferring funds.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="paymentId" type="string" required>
  The short ID of the payment to decline
</ParamField>

## Response

<ResponseField name="message" type="string">
  Confirmation message indicating the payment was declined
</ResponseField>

<ResponseField name="status" type="string">
  The new approval status ("Decline")
</ResponseField>

<ResponseField name="txHash" type="string">
  Transaction hash (will be null for declined payments)
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/payments/setDecline" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "paymentId": "payee_c7m5fdJAfaV3R7VVpWk2MT"
  }'
```

```javascript Node.js
const axios = require('axios');

async function declinePayment(paymentId) {
  try {
    const response = await axios.post('https://api.magebank.ai/payments/setDecline', {
      paymentId: paymentId
    }, {
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Payment decline result:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error declining payment:', error.response ? error.response.data : error.message);
    throw error;
  }
}

declinePayment('payee_c7m5fdJAfaV3R7VVpWk2MT');
```

```python Python
import requests
import json

def decline_payment(payment_id):
    url = "https://api.magebank.ai/payments/setDecline"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "paymentId": payment_id
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    if response.status_code == 200:
        result = response.json()
        print("Payment decline result:", result)
        return result
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

decline_payment("payee_c7m5fdJAfaV3R7VVpWk2MT")
```

</CodeGroup>

## Example Response

```json
{
  "message": "Payment declined successfully",
  "status": "Decline",
  "txHash": null
}
```

## Error Responses

<ResponseExample>
```json 400 Bad Request
{
  "error": "Payment ID is required"
}
```

```json 404 Not Found
{
  "error": "Payment not found"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Payment declined successfully |
| 400 | Bad Request - Missing payment ID |
| 404 | Not Found - Payment not found |
| 500 | Internal Server Error |

## Notes

- Only payments with an approval status of "Waiting for Sender Approval" can be declined.
- Once declined, no funds will be transferred and the transaction won't be processed.
- The payment's status will be updated to "Confirmed" with an approval status of "Decline".
- Declined payments cannot be later approved; a new payment must be created if necessary.


================================================
FILE: api-reference/payments/export-payments.mdx
================================================
---
title: 'Export Payments'
api: 'POST /payments/export'
description: 'Export payments data in various formats (CSV, XLSX, PDF)'
---

Exports payment data in CSV, XLSX, or PDF format for a specified date range for reporting and record-keeping.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="format" type="string" required>
  Export format (csv, xlsx, or pdf)
</ParamField>

<ParamField body="dateRange" type="object">
  <Expandable title="properties">
    <ParamField body="start" type="string" format="date">
      Start date for the export (YYYY-MM-DD)
    </ParamField>
    <ParamField body="end" type="string" format="date">
      End date for the export (YYYY-MM-DD)
    </ParamField>
  </Expandable>
</ParamField>

## Response

The response is a file download in the requested format (CSV, XLSX, or PDF).

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/payments/export" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "format": "xlsx",
    "dateRange": {
      "start": "2025-05-01",
      "end": "2025-05-31"
    }
  }' \
  --output payments_export.xlsx
```

```javascript Node.js
const axios = require('axios');
const fs = require('fs');

async function exportPayments(format, startDate, endDate) {
  try {
    const response = await axios({
      method: 'post',
      url: 'https://api.magebank.ai/payments/export',
      data: {
        format: format,
        dateRange: {
          start: startDate,
          end: endDate
        }
      },
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      },
      responseType: 'stream'
    });
    
    // Create file name based on format and date range
    const fileName = `payments_${startDate}_to_${endDate}.${format}`;
    
    // Save the file
    const writer = fs.createWriteStream(fileName);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', () => {
        console.log(`Payments exported to ${fileName}`);
        resolve(fileName);
      });
      writer.on('error', reject);
    });
  } catch (error) {
    console.error('Error exporting payments:', error.response ? error.response.data : error.message);
    throw error;
  }
}

// Export payments for May 2025 in Excel format
exportPayments('xlsx', '2025-05-01', '2025-05-31');
```

```python Python
import requests
import json

def export_payments(export_format, start_date, end_date):
    url = "https://api.magebank.ai/payments/export"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "format": export_format,
        "dateRange": {
            "start": start_date,
            "end": end_date
        }
    }
    
    # Use stream=True to handle file download
    response = requests.post(url, headers=headers, data=json.dumps(payload), stream=True)
    
    if response.status_code == 200:
        # Create file name based on format and date range
        file_name = f"payments_{start_date}_to_{end_date}.{export_format}"
        
        # Save the file
        with open(file_name, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        print(f"Payments exported to {file_name}")
        return file_name
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

# Export payments for May 2025 in Excel format
export_payments("xlsx", "2025-05-01", "2025-05-31")
```

</CodeGroup>

## Error Responses

<ResponseExample>
```json 400 Invalid Format
{
  "error": "Invalid export format. Supported formats are: csv, xlsx, pdf"
}
```

```json 400 Invalid Date Range
{
  "error": "Invalid date range. End date must be after start date"
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Export completed successfully |
| 400 | Bad Request - Invalid parameters |
| 401 | Unauthorized - Invalid or missing API key |
| 500 | Internal Server Error |

## Notes

- If no `dateRange` is provided, the export will include all available payment data.
- Each export format has different advantages:
  - **CSV**: Simple format compatible with most spreadsheet applications
  - **XLSX**: Excel format with advanced formatting capabilities
  - **PDF**: Formatted document suitable for sharing and printing
- Export files include payment ID, name, sender/receiver, amount, status, and timestamps
- The maximum export size is 10,000 payments; use multiple requests for larger datasets


================================================
FILE: api-reference/payments/get-payment.mdx
================================================
---
title: 'Get Payment'
api: 'GET /payments/{id}'
description: 'Fetch details of a specific payment'
---

Retrieves detailed information about a specific payment based on its ID.

## Path Parameters

<ParamField path="id" type="string" required>
  Payment ID in the format `payee_xxx`
</ParamField>

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Response

<ResponseField name="id" type="string">
  Unique payment identifier in short ID format
</ResponseField>

<ResponseField name="name" type="string">
  Name or description of the payment
</ResponseField>

<ResponseField name="type" type="string">
  Type of payment (EXTERNAL or INTERNAL)
</ResponseField>

<ResponseField name="senderagentid" type="string">
  ID of the agent sending the payment
</ResponseField>

<ResponseField name="receiveragentid" type="string">
  ID of the agent receiving the payment
</ResponseField>

<ResponseField name="status" type="string">
  Current status of the payment (New, Confirmed, Completed, Failed)
</ResponseField>

<ResponseField name="approvalstatus" type="string">
  Approval status of the payment (Approved, Declined, Pending, Waiting, Waiting for Sender Approval)
</ResponseField>

<ResponseField name="approvalrequired" type="boolean">
  Whether this payment requires approval
</ResponseField>

<ResponseField name="paymentdetails" type="object">
  <Expandable title="properties">
    <ResponseField name="method" type="string">
      Payment method used
    </ResponseField>
    <ResponseField name="amount" type="number">
      Payment amount
    </ResponseField>
    <ResponseField name="currency" type="string">
      Payment currency
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="contactdetails" type="object">
  <Expandable title="properties">
    <ResponseField name="email" type="string">
      Contact email for the payment recipient
    </ResponseField>
    <ResponseField name="phoneNumber" type="string">
      Contact phone number for the payment recipient
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="tags" type="array">
  Tags or categories for the payment
</ResponseField>

<ResponseField name="createdat" type="string">
  Timestamp when the payment was created
</ResponseField>

<ResponseField name="approvedat" type="string">
  Timestamp when the payment was approved/declined
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X GET "https://api.magebank.ai/payments/payee_8tJo7vZb1RKo4oeyWuqgK" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getPayment(paymentId) {
  try {
    const response = await axios.get(`https://api.magebank.ai/payments/${paymentId}`, {
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log('Payment details:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error retrieving payment:', error.response ? error.response.data : error.message);
    throw error;
  }
}

getPayment('payee_8tJo7vZb1RKo4oeyWuqgK');
```

```python Python
import requests

def get_payment(payment_id):
    url = f"https://api.magebank.ai/payments/{payment_id}"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        payment_data = response.json()
        print("Payment details:", payment_data)
        return payment_data
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

get_payment("payee_8tJo7vZb1RKo4oeyWuqgK")
```

</CodeGroup>

## Example Response

```json
{
  "id": "payee_wDG5cavUCoK53uvFzTvkey",
  "name": "Vendor XYZ Payment",
  "type": "EXTERNAL",
  "senderagentid": "agent_eC6ZezevNsqxvoKmQrUuoU",
  "receiveragentid": "agent_k77NTwxp2Ym3JCmVsKtXQA",
  "status": "New",
  "approvalstatus": "Waiting for Sender Approval",
  "approvalrequired": true,
  "paymentdetails": {
    "method": "CRYPTO_ADDRESS",
    "amount": 6,
    "currency": "USDC"
  },
  "contactdetails": {
    "email": "contact@vendorxyz.com",
    "phoneNumber": "+1234567890"
  },
  "tags": [
    "vendor",
    "regular"
  ],
  "createdat": "2025-04-17T10:28:18.512792+00:00",
  "approvedat": null
}
```

## Error Responses

<ResponseExample>
```json 404 Not Found
{
  "error": "Payment not found"
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Payment details retrieved successfully |
| 401 | Unauthorized - Invalid or missing API key |
| 404 | Not Found - Payment not found |
| 500 | Internal Server Error |

## Notes

- The payment ID can be in the short format (e.g., `payee_8tJo7vZb1RKo4oeyWuqgK`).
- The `approvedat` field will be null if the payment has not yet been approved or declined.
- The `contactdetails` object may be empty if no contact information was provided.
- The `type` field can be either "EXTERNAL" (to recipients outside the user's agent network) or "INTERNAL" (between the user's own agents).


================================================
FILE: api-reference/payments/get-user-payments.mdx
================================================
---
title: 'List User Payments'
api: 'GET /user/payments'
description: "Get all payments related to the authenticated user's agents"
---

Retrieves a list of payments where either the sender or receiver is one of the user's agents, with optional filtering by approval status.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Query Parameters

<ParamField query="approvalStatus" type="string">
  Filter payments by approval status
</ParamField>

## Response

Returns an array of payment objects, each containing:

<ResponseField name="id" type="string">
  Unique payment identifier in short ID format
</ResponseField>

<ResponseField name="senderagentid" type="string">
  ID of the agent sending the payment
</ResponseField>

<ResponseField name="receiveragentid" type="string">
  ID of the agent receiving the payment
</ResponseField>

<ResponseField name="initiatedBy" type="string">
  Name of the agent that initiated the payment
</ResponseField>

<ResponseField name="receivedBy" type="string">
  Name of the agent that received the payment
</ResponseField>

<ResponseField name="direction" type="string">
  Direction of the payment relative to the user's agents (incoming, outgoing)
</ResponseField>

<ResponseField name="name" type="string">
  Name or description of the payment
</ResponseField>

<ResponseField name="approvalstatus" type="string">
  Approval status of the payment
</ResponseField>

<ResponseField name="createdat" type="string">
  Timestamp when the payment was created
</ResponseField>

<ResponseField name="type" type="string">
  Type of payment (EXTERNAL, INTERNAL)
</ResponseField>

<ResponseField name="paymentdetails" type="object">
  <Expandable title="properties">
    <ResponseField name="method" type="string">
      Payment method used
    </ResponseField>
    <ResponseField name="amount" type="number">
      Payment amount
    </ResponseField>
    <ResponseField name="currency" type="string">
      Payment currency
    </ResponseField>
  </Expandable>
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
# Get all payments
curl -X GET "https://api.magebank.ai/user/payments" \
  -H "x-api-key: YOUR_API_KEY"

# Get only payments waiting for approval
curl -X GET "https://api.magebank.ai/user/payments?approvalStatus=Waiting%20for%20Sender%20Approval" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getUserPayments(approvalStatus = null) {
  try {
    const params = {};
    if (approvalStatus) {
      params.approvalStatus = approvalStatus;
    }
    
    const response = await axios.get('https://api.magebank.ai/user/payments', {
      params: params,
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log(`Found ${response.data.length} payments`);
    return response.data;
  } catch (error) {
    console.error('Error retrieving payments:', error.response ? error.response.data : error.message);
    throw error;
  }
}

// Get all payments
getUserPayments();

// Get only payments waiting for approval
getUserPayments('Waiting for Sender Approval');
```

```python Python
import requests

def get_user_payments(approval_status=None):
    url = "https://api.magebank.ai/user/payments"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    params = {}
    if approval_status:
        params["approvalStatus"] = approval_status
    
    response = requests.get(url, headers=headers, params=params)
    
    if response.status_code == 200:
        payments = response.json()
        print(f"Found {len(payments)} payments")
        return payments
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

# Get all payments
get_user_payments()

# Get only payments waiting for approval
get_user_payments("Waiting for Sender Approval")
```

</CodeGroup>

## Example Response

```json
[
  {
    "id": "payee_8tJo7vZb1RKo4oeyWuqgK",
    "senderagentid": "agent_8tJo7vZb1RKo4oeyWuqgK",
    "receiveragentid": "agent_7tJo7vZb1RKo4oeyWuqgK",
    "initiatedBy": "Alice",
    "receivedBy": "Bob",
    "direction": "outgoing",
    "name": "Payment from Alice to Bob",
    "approvalstatus": "Approved",
    "createdat": "2025-04-07T12:00:00Z",
    "type": "EXTERNAL",
    "paymentdetails": {
      "method": "CRYPTO_ADDRESS",
      "amount": 100,
      "currency": "USDC"
    }
  },
  {
    "id": "payee_9tJo7vZb1RKo4oeyWuqgK",
    "senderagentid": "agent_7tJo7vZb1RKo4oeyWuqgK",
    "receiveragentid": "agent_8tJo7vZb1RKo4oeyWuqgK",
    "initiatedBy": "Bob",
    "receivedBy": "Alice",
    "direction": "incoming",
    "name": "Payment from Bob to Alice",
    "approvalstatus": "Waiting",
    "createdat": "2025-04-08T10:00:00Z",
    "type": "EXTERNAL",
    "paymentdetails": {
      "method": "CRYPTO_ADDRESS",
      "amount": 50,
      "currency": "USDC"
    }
  }
]
```

## Error Responses

<ResponseExample>
```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | List of payments retrieved successfully |
| 401 | Unauthorized - Invalid or missing API key |
| 500 | Internal Server Error |

## Notes

- The `direction` field indicates whether the payment is incoming or outgoing relative to your agents.
- Payments are sorted by creation date, with the most recent first.
- Valid approval status values include "Approved", "Declined", "Pending", "Waiting", and "Waiting for Sender Approval".
- If no payments match the filter criteria, an empty array will be returned.


================================================
FILE: api-reference/payments/introduction.mdx
================================================
---
title: 'Introduction'
description: 'Process and manage payments between agents and external accounts'
---

The Payments API allows you to process financial transactions between agents and manage payment approvals. These endpoints provide comprehensive functionality for initiating, tracking, approving, and analyzing payments within the MageBank ecosystem.

<Note type="warning">
  In sandbox mode only agent-to-agent transactions are currently supported. Agent to bank account, agent to businesses, and agent to checkout pages are coming soon.
</Note>

## Payment Model

Each payment in the MageBank system consists of:

- **Identifiers**: Unique ID, name, and type
- **Participants**: Sender and receiver agent IDs
- **Status Tracking**: Current status and approval status flags
- **Financial Details**: Amount, currency, and payment method
- **Metadata**: Creation timestamp, approval timestamp, and other attributes

Here's an example of the payment data structure:

```json
{
  "id": "payee_wDG5cavUCoK53uvFzTvkey",
  "name": "Vendor XYZ Payment",
  "type": "EXTERNAL",
  "senderagentid": "agent_eC6ZezevNsqxvoKmQrUuoU",
  "receiveragentid": "agent_k77NTwxp2Ym3JCmVsKtXQA",
  "status": "New",
  "approvalstatus": "Waiting",
  "approvalrequired": true,
  "paymentdetails": {
    "method": "CRYPTO_ADDRESS",
    "amount": 6,
    "currency": "USDC"
  },
  "contactdetails": {
    "email": "contact@vendorxyz.com",
    "phoneNumber": "+1234567890"
  },
  "tags": [
    "vendor",
    "regular"
  ],
  "createdat": "2025-04-17T10:28:18.512792+00:00",
  "approvedat": "2025-04-17T11:30:00.000000+00:00"
}
```

## Available Endpoints

<CardGroup>
  <Card title="Register Payment" icon="plus" href="/api-reference/payments/register-payment">
    Create a new payment transaction between agents
  </Card>
  <Card title="Approve Payment" icon="check" href="/api-reference/payments/approve-payment">
    Approve a payment that requires authorization
  </Card>
  <Card title="Decline Payment" icon="xmark" href="/api-reference/payments/decline-payment">
    Decline a payment to prevent processing
  </Card>
  <Card title="Get Payment" icon="eye" href="/api-reference/payments/get-payment">
    Fetch details of a specific payment
  </Card>
  <Card title="List User Payments" icon="list" href="/api-reference/payments/get-user-payments">
    Get all payments related to the user's agents
  </Card>
  <Card title="Export Payments" icon="file-export" href="/api-reference/payments/export-payments">
    Export payments data in various formats
  </Card>
</CardGroup>

## Payment Lifecycle

The typical lifecycle of a payment includes:

1. **Creation**: A payment is registered with sender, receiver, and amount details
2. **Approval Check**: The system determines if approval is required based on agent rules
3. **Approval/Decline**: If required, the payment is approved or declined by an authorized user
4. **Processing**: For approved payments, funds are transferred on the blockchain
5. **Completion**: The payment status is updated to "Confirmed" when complete

## Payment Types

MageBank supports two main types of payments:

- **EXTERNAL**: Payments to recipients outside the user's agent network
- **INTERNAL**: Transfers between the user's own agents

## Payment Status

Payments progress through various status states:

| Status | Description |
|--------|-------------|
| New | Payment has been created and is awaiting approval or processing |
| Pending | Payment is in process of being executed |
| Confirmed | Payment has been fully processed |

## Approval Status

Payments can have the following approval states:

| Approval Status | Description |
|-----------------|-------------|
| Waiting | Initial state before approval check |
| Pending | Payment is awaiting additional confirmation |
| Approved | Payment has been explicitly approved |
| Decline | Payment has been explicitly declined |

## Best Practices

- Implement proper error handling to account for declined payments
- Regularly check payment statuses to ensure proper processing
- Use appropriate payment types (INTERNAL vs. EXTERNAL) based on the recipient
- Include meaningful payment names and tags for better organization
- Set up appropriate approval thresholds based on business requirements

## Next Steps

Use the endpoints in this section to manage payment operations. After processing payments, you can:

- Track [transaction history](/api-reference/transactions/get-transaction-summary) for financial reporting
- Set up [savings accounts](/api-reference/savings/introduction) to optimize idle funds
- Manage [agent funding](/api-reference/agents/deposit) based on payment patterns


================================================
FILE: api-reference/payments/register-payment.mdx
================================================
---
title: 'Register Payment'
api: 'POST /payments/register'
description: "Create a new payment transaction between agents"
---

Creates a new payment transaction between agents and processes it based on the sender agent's approval rules.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="senderagentid" type="string" required>
  ID of the agent sending the payment
</ParamField>

<ParamField body="receiveragentid" type="string" required>
  ID of the agent receiving the payment
</ParamField>

<ParamField body="paymentdetails" type="object" required>
  <Expandable title="properties">
    <ParamField body="amount" type="number" required>
      Payment amount
    </ParamField>
    <ParamField body="currency" type="string" required>
      Payment currency (typically "USDC")
    </ParamField>
    <ParamField body="method" type="string" required>
      Payment method (typically "CRYPTO_ADDRESS")
    </ParamField>
  </Expandable>
</ParamField>

<ParamField body="name" type="string" required>
  Name or description of the payment
</ParamField>

<ParamField body="type" type="string" required>
  Type of payment (EXTERNAL or INTERNAL)
</ParamField>

<ParamField body="contactdetails" type="object">
  <Expandable title="properties">
    <ParamField body="email" type="string">
      Contact email for the payment recipient
    </ParamField>
    <ParamField body="phoneNumber" type="string">
      Contact phone number for the payment recipient
    </ParamField>
  </Expandable>
</ParamField>

<ParamField body="tags" type="array">
  Tags or categories for the payment
</ParamField>

## Response

<ResponseField name="id" type="string">
  Unique payment identifier in short ID format
</ResponseField>

<ResponseField name="name" type="string">
  Name or description of the payment
</ResponseField>

<ResponseField name="type" type="string">
  Type of payment (EXTERNAL or INTERNAL)
</ResponseField>

<ResponseField name="status" type="string">
  Current status of the payment (New, Pending, or Confirmed)
</ResponseField>

<ResponseField name="createdat" type="string">
  Timestamp when the payment was created
</ResponseField>

<ResponseField name="approvalRequired" type="boolean">
  Whether this payment requires approval
</ResponseField>

<ResponseField name="approvalstatus" type="string">
  Current approval status (Waiting, Pending, Approved, or Decline)
</ResponseField>

<ResponseField name="txHash" type="string">
  Transaction hash on the blockchain (if processed immediately)
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/payments/register" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "senderagentid": "agent_eC6ZezevNsqxvoKmQrUuoU",
    "receiveragentid": "agent_k77NTwxp2Ym3JCmVsKtXQA",
    "paymentdetails": {
      "amount": 6,
      "currency": "USDC",
      "method": "CRYPTO_ADDRESS"
    },
    "name": "Vendor XYZ Payment",
    "type": "EXTERNAL",
    "contactdetails": {
      "email": "contact@vendorxyz.com",
      "phoneNumber": "+1234567890"
    },
    "tags": ["vendor", "regular"]
  }'
```

```javascript Node.js
const axios = require('axios');

async function registerPayment() {
  try {
    const response = await axios.post('https://api.magebank.ai/payments/register', {
      senderagentid: "agent_eC6ZezevNsqxvoKmQrUuoU",
      receiveragentid: "agent_k77NTwxp2Ym3JCmVsKtXQA",
      paymentdetails: {
        amount: 6,
        currency: "USDC",
        method: "CRYPTO_ADDRESS"
      },
      name: "Vendor XYZ Payment",
      type: "EXTERNAL",
      contactdetails: {
        email: "contact@vendorxyz.com",
        phoneNumber: "+1234567890"
      },
      tags: ["vendor", "regular"]
    }, {
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Payment registered:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error registering payment:', error.response ? error.response.data : error.message);
    throw error;
  }
}

registerPayment();
```

```python Python
import requests
import json

def register_payment():
    url = "https://api.magebank.ai/payments/register"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "senderagentid": "agent_eC6ZezevNsqxvoKmQrUuoU",
        "receiveragentid": "agent_k77NTwxp2Ym3JCmVsKtXQA",
        "paymentdetails": {
            "amount": 6,
            "currency": "USDC",
            "method": "CRYPTO_ADDRESS"
        },
        "name": "Vendor XYZ Payment",
        "type": "EXTERNAL",
        "contactdetails": {
            "email": "contact@vendorxyz.com",
            "phoneNumber": "+1234567890"
        },
        "tags": ["vendor", "regular"]
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    if response.status_code == 200:
        payment_data = response.json()
        print("Payment registered:", payment_data)
        return payment_data
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

register_payment()
```

</CodeGroup>

## Example Response

```json
{
  "id": "payee_wDG5cavUCoK53uvFzTvkey",
  "name": "Vendor XYZ Payment",
  "type": "EXTERNAL",
  "status": "New",
  "approvalstatus": "Waiting",
  "approvalRequired": true,
  "createdat": "2025-04-17T10:28:18.512792",
  "txHash": null
}
```

## Error Responses

<ResponseExample>
```json 400 Missing Required Fields
{
  "error": "Required fields missing: senderagentid, receiveragentid, paymentdetails, name, type"
}
```

```json 400 Invalid Payment Details
{
  "error": "Invalid payment details. Amount must be positive."
}
```

```json 404 Agent Not Found
{
  "error": "Sender agent not found"
}
```

```json 400 Insufficient Balance
{
  "error": "Insufficient balance in sender agent's wallet"
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Payment registered successfully |
| 400 | Bad Request - Invalid or missing parameters |
| 401 | Unauthorized - Invalid or missing API key |
| 404 | Not Found - Agent not found |
| 500 | Internal Server Error |

## Notes

- If the payment amount exceeds the sender agent's limits, the request will fail.
- Payments requiring approval will have `approvalRequired` set to `true`.
- You'll need to use the [Approve Payment](/api-reference/payments/approve-payment) endpoint for payments that require approval.
- Payments that don't require approval will be processed immediately.
- Agent IDs can be in either short format or UUID format.
- Use "EXTERNAL" type for payments outside the user's agent network and "INTERNAL" for payments between the user's own agents.


================================================
FILE: api-reference/savings/calculate-interest.mdx
================================================
---
title: 'Calculate Interest'
api: 'POST /investment/calculator'
description: 'Calculate potential interest for a given investment amount and period'
---

Calculates the potential interest earned for a given investment amount and period, with optional custom rate for planning scenarios.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="amount" type="number" required>
  Principal amount to invest
</ParamField>

<ParamField body="days" type="number" required>
  Investment duration in days
</ParamField>

<ParamField body="customRate" type="number">
  Optional custom interest rate (annual percentage)
</ParamField>

## Response

<ResponseField name="principal" type="number">
  Principal amount for the calculation
</ResponseField>

<ResponseField name="days" type="number">
  Investment duration in days
</ResponseField>

<ResponseField name="interestRate" type="number">
  Annual interest rate applied to the calculation
</ResponseField>

<ResponseField name="interestEarned" type="string">
  Interest amount earned over the period
</ResponseField>

<ResponseField name="totalAmount" type="string">
  Total amount including principal and interest
</ResponseField>

<ResponseField name="annualYield" type="string">
  Effective annual yield as a percentage
</ResponseField>

<ResponseField name="calculation" type="object">
  <Expandable title="properties">
    <ResponseField name="formula" type="string">
      Formula used for calculation
    </ResponseField>
    <ResponseField name="steps" type="array">
      Step-by-step calculation process
    </ResponseField>
  </Expandable>
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/investment/calculator" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 1000,
    "days": 365,
    "customRate": 4.5
  }'
```

```javascript Node.js
const axios = require('axios');

async function calculateInterest(amount, days, customRate = null) {
  try {
    const payload = {
      amount: amount,
      days: days
    };
    
    if (customRate !== null) {
      payload.customRate = customRate;
    }
    
    const response = await axios.post('https://api.magebank.ai/investment/calculator', payload, {
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Interest calculation:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error calculating interest:', error.response ? error.response.data : error.message);
    throw error;
  }
}

// Calculate interest for $1000 over 1 year at 4.5% APY
calculateInterest(1000, 365, 4.5);
```

```python Python
import requests
import json

def calculate_interest(amount, days, custom_rate=None):
    url = "https://api.magebank.ai/investment/calculator"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "amount": amount,
        "days": days
    }
    
    if custom_rate is not None:
        payload["customRate"] = custom_rate
    
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    if response.status_code == 200:
        calculation = response.json()
        print(f"For ${amount} over {days} days at {calculation['interestRate']}% APY:")
        print(f"Interest earned: ${calculation['interestEarned']}")
        print(f"Total amount: ${calculation['totalAmount']}")
        return calculation
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

# Calculate interest for $1000 over 1 year at 4.5% APY
calculate_interest(1000, 365, 4.5)
```

</CodeGroup>

## Example Response

```json
{
  "principal": 1000,
  "days": 365,
  "interestRate": 4.5,
  "interestEarned": "45.00",
  "totalAmount": "1045.00",
  "annualYield": "4.50%",
  "calculation": {
    "formula": "principal × rate × (days ÷ 365)",
    "steps": [
      "1000 × 0.045 × 365/365",
      "1000 × 0.045 × 1.000000",
      "1000 × 0.045000",
      "45.000000"
    ]
  }
}
```

## Error Responses

<ResponseExample>
```json 400 Missing Parameters
{
  "success": false,
  "error": "Amount and days are required"
}
```

```json 400 Invalid Amount
{
  "success": false,
  "error": "Amount must be a positive number"
}
```

```json 400 Invalid Days
{
  "success": false,
  "error": "Days must be a positive number"
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Interest calculation completed successfully |
| 400 | Bad Request - Invalid or missing parameters |
| 401 | Unauthorized - Invalid or missing API key |
| 500 | Internal Server Error |

## Notes

- If `customRate` is not provided, the current platform interest rate will be used.
- Interest is calculated using the formula: `principal × rate × (days ÷ 365)`.
- This endpoint is useful for financial planning and comparing investment scenarios.


================================================
FILE: api-reference/savings/deposit.mdx
================================================
---
title: 'Deposit Savings'
api: 'POST /savings/deposit'
description: "Deposit an agent's funds into the savings vault"
---

Creates a new investment by moving funds from an agent's wallet into the savings vault.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="agentId" type="string" required>
  The short ID or UUID of the agent
</ParamField>

<ParamField body="amount" type="number" format="decimal(16,2)" required>
  Amount to deposit (must be positive)
</ParamField>

## Response

<ResponseField name="success" type="boolean">
  Whether the deposit was successful
</ResponseField>

<ResponseField name="message" type="string">
  Information about the deposit
</ResponseField>

<ResponseField name="investmentId" type="string">
  The ID of the newly created investment
</ResponseField>

<ResponseField name="transaction" type="object">
  <Expandable title="properties">
    <ResponseField name="txHash" type="string">
      Transaction hash on the blockchain
    </ResponseField>
    <ResponseField name="status" type="string">
      Status of the transaction
    </ResponseField>
  </Expandable>
</ResponseField>

## Investment Record

The operation creates a new record in the investments table with the following fields:

<ResponseField name="id" type="uuid">
  Unique investment identifier
</ResponseField>

<ResponseField name="agent_id" type="uuid">
  ID of the agent associated with the investment
</ResponseField>

<ResponseField name="amount" type="decimal(16,2)">
  Principal amount invested
</ResponseField>

<ResponseField name="invested_at" type="timestamp with time zone">
  Timestamp when the investment was created (with timezone)
</ResponseField>

<ResponseField name="status" type="text">
  Set to 'active' by default
</ResponseField>

<ResponseField name="tx_hash" type="text">
  Blockchain transaction hash for the deposit
</ResponseField>

<ResponseField name="interest_rate" type="decimal(5,2)">
  Current interest rate at the time of deposit
</ResponseField>

<ResponseField name="user_id" type="uuid">
  ID of the user who owns the agent
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/savings/deposit" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "agentId": "agent_k77NTwxp2Ym3JCmVsKtXQA",
    "amount": 100.50
  }'
```

```javascript Node.js
const axios = require('axios');

async function depositSavings(agentId, amount) {
  try {
    const response = await axios.post('https://api.magebank.ai/savings/deposit', {
      agentId: agentId,
      amount: amount
    }, {
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Deposit result:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error depositing savings:', error.response ? error.response.data : error.message);
    throw error;
  }
}

depositSavings('agent_k77NTwxp2Ym3JCmVsKtXQA', 100.50);
```

```python Python
import requests
import json

def deposit_savings(agent_id, amount):
    url = "https://api.magebank.ai/savings/deposit"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "agentId": agent_id,
        "amount": amount
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    if response.status_code == 200:
        result = response.json()
        print("Deposit result:", result)
        return result
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

deposit_savings("agent_k77NTwxp2Ym3JCmVsKtXQA", 100.50)
```

</CodeGroup>

## Example Response

```json
{
  "success": true,
  "message": "Successfully invested 100.50 USDC.",
  "investmentId": "inv_k77NTwxp2Ym3JCmVsKtXQA",
  "transaction": {
    "txHash": "0x123...abc",
    "status": "completed"
  }
}
```

## Error Responses

<ResponseExample>
```json 400 Missing Parameters
{
  "error": "agentId and amount are required"
}
```

```json 400 Invalid Amount
{
  "error": "Amount must be a positive number"
}
```

```json 400 Insufficient Balance
{
  "error": "Agent has insufficient balance"
}
```

```json 404 Agent Not Found
{
  "error": "Agent not found"
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Deposit completed successfully |
| 400 | Bad Request - Invalid or missing parameters |
| 401 | Unauthorized - Invalid or missing API key |
| 404 | Not Found - Agent not found |
| 500 | Internal Server Error |

## Notes

- The agent must have sufficient funds in its wallet to complete the deposit.
- The amount must be a positive number.
- Interest will begin accruing immediately at the current platform rate.
- The transaction may take a few moments to be confirmed on the blockchain.
- The returned investment ID can be used to track the investment or to withdraw funds later.


================================================
FILE: api-reference/savings/get-agent-investments.mdx
================================================
---
title: 'Get Agent Investments'
api: 'GET /savings/{agentId}'
description: 'Get all investments for a specific agent'
---

Retrieves all investments (both active and completed) associated with a specific agent, including current values and earned interest.

## Path Parameters

<ParamField path="agentId" type="string" required>
  The short ID or UUID of the agent
</ParamField>

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Response

<ResponseField name="investments" type="array">
  <Expandable title="Investment Object">
    <ResponseField name="id" type="string">
      Unique investment identifier in short ID format
    </ResponseField>
    <ResponseField name="agent_id" type="string">
      ID of the agent associated with this investment
    </ResponseField>
    <ResponseField name="amount" type="number">
      Principal amount invested
    </ResponseField>
    <ResponseField name="invested_at" type="string">
      Timestamp when the investment was created
    </ResponseField>
    <ResponseField name="status" type="string">
      Current status of the investment (active, completed, cancelled)
    </ResponseField>
    <ResponseField name="current_value" type="string">
      Current value of the investment including earned interest
    </ResponseField>
    <ResponseField name="interest_earned" type="string">
      Interest earned on the investment to date
    </ResponseField>
  </Expandable>
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X GET "https://api.magebank.ai/savings/agent_k77NTwxp2Ym3JCmVsKtXQA" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getAgentInvestments(agentId) {
  try {
    const response = await axios.get(`https://api.magebank.ai/savings/${agentId}`, {
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log(`Found ${response.data.investments.length} investments for agent`);
    return response.data;
  } catch (error) {
    console.error('Error retrieving agent investments:', error.response ? error.response.data : error.message);
    throw error;
  }
}

getAgentInvestments('agent_k77NTwxp2Ym3JCmVsKtXQA');
```

```python Python
import requests

def get_agent_investments(agent_id):
    url = f"https://api.magebank.ai/savings/{agent_id}"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        investments = data.get('investments', [])
        print(f"Found {len(investments)} investments for agent")
        for i, inv in enumerate(investments):
            status = inv.get('status')
            amount = inv.get('amount')
            current = inv.get('current_value')
            interest = inv.get('interest_earned')
            print(f"Investment {i+1}: {status}, {amount} USDC invested, {current} USDC current value, {interest} USDC interest")
        return data
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

get_agent_investments("agent_k77NTwxp2Ym3JCmVsKtXQA")
```

</CodeGroup>

## Example Response

```json
{
  "investments": [
    {
      "id": "inv_k77NTwxp2Ym3JCmVsKtXQA",
      "agent_id": "agent_k77NTwxp2Ym3JCmVsKtXQA",
      "amount": 1000,
      "invested_at": "2025-04-15T11:00:08.432269+00:00",
      "status": "active",
      "current_value": "1050.00",
      "interest_earned": "50.00"
    },
    {
      "id": "inv_p99QTaxp3Zm3KDnWtLuRrD",
      "agent_id": "agent_k77NTwxp2Ym3JCmVsKtXQA",
      "amount": 500,
      "invested_at": "2025-03-10T09:15:22.123456+00:00",
      "status": "completed",
      "current_value": "515.25",
      "interest_earned": "15.25"
    }
  ]
}
```

## Error Responses

<ResponseExample>
```json 400 Bad Request
{
  "error": "Invalid agent ID format"
}
```

```json 404 Not Found
{
  "error": "Agent not found"
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | List of investments retrieved successfully |
| 400 | Bad Request - Invalid agent ID format |
| 401 | Unauthorized - Invalid or missing API key |
| 404 | Not Found - Agent not found |
| 500 | Internal Server Error |

## Notes

- Returns all investments for the agent, regardless of status (active, completed, cancelled).
- For active investments, current values are calculated in real-time.
- For completed investments, values show the final amounts at time of withdrawal.
- All monetary values are in USDC by default.


================================================
FILE: api-reference/savings/get-dashboard.mdx
================================================
---
title: 'Get Savings Dashboard'
api: 'GET /savings/dashboard'
description: "Get a comprehensive overview of the user's savings portfolio"
---

Provides a summary of the user's savings portfolio, including total savings, interest rate, and agent-level investment details.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Response

<ResponseField name="totalSavings" type="number">
  Total current value of all investments including interest
</ResponseField>

<ResponseField name="interestRate" type="number">
  Current interest rate applied to investments
</ResponseField>

<ResponseField name="totalInvested" type="number">
  Total principal amount invested by the user
</ResponseField>

<ResponseField name="yearProjection" type="number">
  Projected value of investments after one year at current rate
</ResponseField>

<ResponseField name="agents" type="array">
  <Expandable title="Agent Investment Details">
    <ResponseField name="agent" type="string">
      Name of the agent
    </ResponseField>
    <ResponseField name="investment_id" type="string">
      Investment ID in short format
    </ResponseField>
    <ResponseField name="totalBalance" type="number">
      Total balance including investment value
    </ResponseField>
    <ResponseField name="investedAmount" type="number">
      Principal amount invested
    </ResponseField>
    <ResponseField name="currentValue" type="number">
      Current value with interest
    </ResponseField>
    <ResponseField name="interest" type="number">
      Interest earned to date
    </ResponseField>
    <ResponseField name="current" type="number">
      Current balance in agent's account
    </ResponseField>
    <ResponseField name="daysInvested" type="number">
      Days the investment has been active
    </ResponseField>
  </Expandable>
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X GET "https://api.magebank.ai/savings/dashboard" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getSavingsDashboard() {
  try {
    const response = await axios.get('https://api.magebank.ai/savings/dashboard', {
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log('Savings dashboard:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error retrieving savings dashboard:', error.response ? error.response.data : error.message);
    throw error;
  }
}

getSavingsDashboard();
```

```python Python
import requests

def get_savings_dashboard():
    url = "https://api.magebank.ai/savings/dashboard"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        dashboard = response.json()
        print(f"Total savings: {dashboard['totalSavings']} USDC")
        print(f"Current interest rate: {dashboard['interestRate']}%")
        print(f"Number of active investments: {len(dashboard['agents'])}")
        return dashboard
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

get_savings_dashboard()
```

</CodeGroup>

## Example Response

```json
{
  "totalSavings": 1500.75,
  "interestRate": 5,
  "totalInvested": 1000,
  "yearProjection": 1050,
  "agents": [
    {
      "agent": "Payment Assistant",
      "investment_id": "inv_k77NTwxp2Ym3JCmVsKtXQA",
      "totalBalance": 1200.5,
      "investedAmount": 1000,
      "currentValue": 1200.5,
      "interest": 200.5,
      "current": 1000,
      "daysInvested": 365
    },
    {
      "agent": "Marketing Budget",
      "investment_id": "inv_j88MTaxp3Zm3KDnWtLuPpB",
      "totalBalance": 300.25,
      "investedAmount": 300,
      "currentValue": 300.25,
      "interest": 0.25,
      "current": 500,
      "daysInvested": 2
    }
  ]
}
```

## Error Responses

<ResponseExample>
```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Savings dashboard data retrieved successfully |
| 401 | Unauthorized - Invalid or missing API key |
| 500 | Internal Server Error |

## Notes

- Only active investments are included in the dashboard.
- Interest calculations are performed in real-time based on the current interest rate.
- The `yearProjection` shows the estimated total value after one year at the current rate.
- All monetary values are in USDC by default.
- The interest rate is expressed as an annual percentage yield (APY).


================================================
FILE: api-reference/savings/get-interest-rate.mdx
================================================
---
title: 'Get Interest Rate'
api: 'GET /investment/interest-rate'
description: 'Get the current annual interest rate for investments'
---

Retrieves the current annual interest rate for investments and the timestamp when it was last updated.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Response

<ResponseField name="interestRate" type="number" format="decimal(5,2)">
  Current annual interest rate for investments (percentage)
</ResponseField>

<ResponseField name="lastUpdated" type="string">
  Timestamp when the interest rate was last updated (ISO 8601 format)
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X GET "https://api.magebank.ai/investment/interest-rate" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getInterestRate() {
  try {
    const response = await axios.get('https://api.magebank.ai/investment/interest-rate', {
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log('Current interest rate:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error retrieving interest rate:', error.response ? error.response.data : error.message);
    throw error;
  }
}

getInterestRate();
```

```python Python
import requests

def get_interest_rate():
    url = "https://api.magebank.ai/investment/interest-rate"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        rate_data = response.json()
        print(f"Current interest rate: {rate_data['interestRate']}%")
        print(f"Last updated: {rate_data['lastUpdated']}")
        return rate_data
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

get_interest_rate()
```

</CodeGroup>

## Example Response

```json
{
  "interestRate": 4.50,
  "lastUpdated": "2025-05-04T12:00:00.000Z"
}
```

## Error Responses

<ResponseExample>
```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Interest rate retrieved successfully |
| 401 | Unauthorized - Invalid or missing API key |
| 500 | Internal Server Error |

## Notes

- The interest rate is expressed as an annual percentage yield (APY).
- Interest rates may change over time based on market conditions.
- When new investments are created, the current interest rate is recorded.
- The current annual percentage yield can be up to 12.50% but is subject to change.


================================================
FILE: api-reference/savings/get-user-investments.mdx
================================================
---
title: 'Get User Investments'
api: 'GET /savings/myinvestments'
description: 'Get all active investments for the authenticated user'
---

Retrieves a list of all active investments across all user agents, including current value and earned interest.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Response

<ResponseField name="agents" type="array">
  <Expandable title="Agent Investment Details">
    <ResponseField name="agent" type="string">
      Name of the agent
    </ResponseField>
    <ResponseField name="investment_id" type="string">
      Investment ID in short format
    </ResponseField>
    <ResponseField name="totalBalance" type="number">
      Total balance including investment value
    </ResponseField>
    <ResponseField name="investedAmount" type="number">
      Principal amount invested
    </ResponseField>
    <ResponseField name="currentValue" type="number">
      Current value with interest
    </ResponseField>
    <ResponseField name="interest" type="number">
      Interest earned to date
    </ResponseField>
    <ResponseField name="current" type="number">
      Current balance in agent's account
    </ResponseField>
    <ResponseField name="daysInvested" type="number">
      Days the investment has been active
    </ResponseField>
  </Expandable>
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X GET "https://api.magebank.ai/savings/myinvestments" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getUserInvestments() {
  try {
    const response = await axios.get('https://api.magebank.ai/savings/myinvestments', {
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log(`Found ${response.data.agents.length} agents with active investments`);
    return response.data;
  } catch (error) {
    console.error('Error retrieving user investments:', error.response ? error.response.data : error.message);
    throw error;
  }
}

getUserInvestments();
```

```python Python
import requests

def get_user_investments():
    url = "https://api.magebank.ai/savings/myinvestments"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        agents = data.get('agents', [])
        print(f"Found {len(agents)} agents with active investments")
        for i, agent in enumerate(agents):
            name = agent.get('agent')
            invested = agent.get('investedAmount')
            current = agent.get('currentValue')
            interest = agent.get('interest')
            days = agent.get('daysInvested')
            print(f"Agent {i+1}: {name}, {invested} USDC invested for {days} days, {current} USDC current value, {interest} USDC interest")
        return data
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

get_user_investments()
```

</CodeGroup>

## Example Response

```json
{
  "agents": [
    {
      "agent": "Payment Assistant",
      "investment_id": "inv_k77NTwxp2Ym3JCmVsKtXQA",
      "totalBalance": 1200.5,
      "investedAmount": 1000,
      "currentValue": 1200.5,
      "interest": 200.5,
      "current": 1000,
      "daysInvested": 365
    },
    {
      "agent": "Marketing Budget",
      "investment_id": "inv_j88MTaxp3Zm3KDnWtLuPpB",
      "totalBalance": 300.25,
      "investedAmount": 300,
      "currentValue": 300.25,
      "interest": 0.25,
      "current": 500,
      "daysInvested": 2
    }
  ]
}
```

## Error Responses

<ResponseExample>
```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | List of active investments retrieved successfully |
| 401 | Unauthorized - Invalid or missing API key |
| 500 | Internal Server Error |

## Notes

- Only active investments are returned; completed or cancelled investments are not included.
- Interest calculations are performed in real-time based on the current platform interest rate.
- The `totalBalance` for each agent includes both the investment value and regular wallet balance.
- If there are no active investments, an empty array will be returned.
- All monetary values are in USDC by default.


================================================
FILE: api-reference/savings/introduction.mdx
================================================
---
title: 'Introduction'
description: 'Manage interest-bearing savings accounts and investments'
---

The Savings API enables your AI agents to autonomously invest idle funds into interest-bearing accounts. Use these endpoints to automatically deposit USDC, track earned interest, manage withdrawals, and optimize your capital efficiency - all through simple API calls that your agents can execute independently.

## Savings and Investment Model

Each savings investment in the MageBank system consists of:

- **Identity**: Unique investment ID and associated agent ID
- **Principal**: Amount initially invested (stored with precision of 2 decimal places)
- **Status**: Current state of the investment (active is the default)
- **Timestamps**: When the investment was created and when it was withdrawn (if applicable)
- **Performance**: Current value and interest earned to date
- **Interest Details**: Interest rate (stored with precision of 2 decimal places) and calculated interest amount
- **Transaction Details**: Transaction hashes for deposit and withdrawal operations

```json
{
  "id": "inv_k77NTwxp2Ym3JCmVsKtXQA",
  "agent_id": "agent_k77NTwxp2Ym3JCmVsKtXQA",
  "amount": 1000.00,
  "invested_at": "2025-04-15T11:00:08.432269+00:00",
  "status": "active",
  "current_value": "1050.00",
  "interest_earned": "50.00",
  "interest_rate": 4.50,
  "days_invested": 30
}
```

## Available Endpoints

<CardGroup>
  <Card title="Get Interest Rate" icon="percent" href="/api-reference/savings/get-interest-rate">
    Get the current annual interest rate
  </Card>
  <Card title="Calculate Interest" icon="calculator" href="/api-reference/savings/calculate-interest">
    Calculate potential interest for a given amount and period
  </Card>
  <Card title="Deposit Savings" icon="arrow-down" href="/api-reference/savings/deposit">
    Deposit funds into a savings account
  </Card>
  <Card title="Withdraw Savings" icon="arrow-up" href="/api-reference/savings/withdraw">
    Withdraw funds from a savings account
  </Card>
  <Card title="Get Savings Dashboard" icon="gauge" href="/api-reference/savings/get-dashboard">
    Get an overview of all savings investments
  </Card>
  <Card title="Get Agent Investments" icon="clipboard-list" href="/api-reference/savings/get-agent-investments">
    Get all investments for a specific agent
  </Card>
  <Card title="Get User Investments" icon="user-chart" href="/api-reference/savings/get-user-investments">
    Get all active investments for the authenticated user
  </Card>
</CardGroup>

## Interest Rate Model

The MageBank platform offers competitive interest rates on USDC holdings. The interest rate:

1. **Centrally Managed**: The rate is set at the platform level and applies to all savings accounts
2. **Regularly Updated**: Rates may be adjusted based on market conditions
3. **Precision**: Stored with up to 2 decimal places of precision
4. **Transparent**: Current rates are always accessible through the API

## Interest Calculation Methodology

MageBank uses standard compound interest formulas to calculate earnings:

```
A = P(1 + r/n)^(nt)
```

Where:
- A = Final amount
- P = Principal (initial deposit)
- r = Annual interest rate (APY)
- n = Number of times interest is compounded per year
- t = Time (in years)

For continuous compounding (as used in MageBank), the formula simplifies to:

```
A = P * e^(rt)
```

Where:
- e = Euler's number (approximately 2.71828)

## How Interest Works

MageBank's interest calculation system:

1. **Amount Precision**: All monetary values are stored with 2 decimal places of precision
2. **Interest Rate Precision**: Interest rates are stored with 2 decimal places (e.g., 4.50%)
3. **Daily Calculation**: Interest is calculated based on the exact number of days invested
4. **No Lock-up Period**: Funds can be deposited or withdrawn at any time without penalties
5. **Real-time Tracking**: Current value and interest earned are updated in real-time

## Investment Lifecycle

The typical lifecycle of a savings investment includes:

1. **Deposit**: Funds are transferred from an agent's regular wallet to a savings account
2. **Active Status**: The investment is marked as "active" and begins accruing interest
3. **Growth Period**: The investment earns interest over time at the current platform rate
4. **Withdrawal**: When ready, funds (principal + interest) are returned to the agent's wallet
5. **Transaction Recording**: All transactions are recorded with blockchain transaction hashes

## Best Practices

- Monitor interest rates regularly to optimize investment timing
- Use the dashboard to track overall investment performance
- Consider distributing funds across multiple agents for different purposes
- Calculate potential returns before investing using the [Calculate Interest](/api-reference/savings/calculate-interest) endpoint
- Regularly review the accumulated interest to inform withdrawal decisions
- Use the interest calculation tools to compare different investment scenarios
- Implement a consistent savings strategy to maximize compound interest benefits

## Next Steps

Use the endpoints in this section to manage savings investments. After setting up savings accounts, you can:

- [Approve payments](/api-reference/payments/approve-payment) using earned interest
- [Monitor transactions](/api-reference/transactions/get-transaction-summary) to track financial flow
- [Create new agents](/api-reference/agents/create-agent) with different investment strategies


================================================
FILE: api-reference/savings/withdraw.mdx
================================================
---
title: 'Withdraw Savings'
api: 'POST /savings/withdraw'
description: 'Withdraw funds from a savings investment'
---

Closes an active investment and returns funds to the agent's wallet with earned interest.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

<ParamField header="Content-Type" type="string" required>
  Must be set to `application/json`
</ParamField>

## Request Body

<ParamField body="investmentId" type="string" required>
  The short ID or UUID of the investment
</ParamField>

## Response

<ResponseField name="success" type="boolean">
  Whether the withdrawal was successful
</ResponseField>

<ResponseField name="message" type="string">
  Information about the withdrawal
</ResponseField>

<ResponseField name="withdrawalDetails" type="object">
  <Expandable title="properties">
    <ResponseField name="principal" type="string">
      Original amount invested
    </ResponseField>
    <ResponseField name="interest" type="string">
      Interest earned during the investment period
    </ResponseField>
    <ResponseField name="totalAmount" type="string">
      Total amount withdrawn (principal + interest)
    </ResponseField>
    <ResponseField name="duration" type="object">
      <Expandable title="properties">
        <ResponseField name="days" type="number">
          Number of days the investment was active
        </ResponseField>
        <ResponseField name="hours" type="number">
          Number of hours beyond whole days
        </ResponseField>
        <ResponseField name="minutes" type="number">
          Number of minutes beyond whole hours
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="transaction" type="object">
  <Expandable title="properties">
    <ResponseField name="txHash" type="string">
      Transaction hash on the blockchain
    </ResponseField>
    <ResponseField name="status" type="string">
      Status of the transaction
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="agentId" type="string">
  The ID of the agent that owned the investment
</ResponseField>

<ResponseField name="updatedBalance" type="string">
  New balance of the agent after the withdrawal
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X POST "https://api.magebank.ai/savings/withdraw" \
  -H "x-api-key: YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "investmentId": "inv_k77NTwxp2Ym3JCmVsKtXQA"
  }'
```

```javascript Node.js
const axios = require('axios');

async function withdrawSavings(investmentId) {
  try {
    const response = await axios.post('https://api.magebank.ai/savings/withdraw', {
      investmentId: investmentId
    }, {
      headers: {
        'x-api-key': 'YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Withdrawal result:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error withdrawing savings:', error.response ? error.response.data : error.message);
    throw error;
  }
}

withdrawSavings('inv_k77NTwxp2Ym3JCmVsKtXQA');
```

```python Python
import requests
import json

def withdraw_savings(investment_id):
    url = "https://api.magebank.ai/savings/withdraw"
    headers = {
        "x-api-key": "YOUR_API_KEY",
        "Content-Type": "application/json"
    }
    
    payload = {
        "investmentId": investment_id
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    if response.status_code == 200:
        result = response.json()
        print("Withdrawal result:", result)
        return result
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

withdraw_savings("inv_k77NTwxp2Ym3JCmVsKtXQA")
```

</CodeGroup>

## Example Response

```json
{
  "success": true,
  "message": "Withdrawal completed successfully.",
  "withdrawalDetails": {
    "principal": "1000.00",
    "interest": "45.75",
    "totalAmount": "1045.75",
    "duration": {
      "days": 30,
      "hours": 5,
      "minutes": 23
    }
  },
  "transaction": {
    "txHash": "0x123...abc",
    "status": "completed"
  },
  "agentId": "agent_k77NTwxp2Ym3JCmVsKtXQA",
  "updatedBalance": "1545.75"
}
```

## Error Responses

<ResponseExample>
```json 400 Missing Investment ID
{
  "error": "Investment ID is required"
}
```

```json 404 Investment Not Found
{
  "error": "Investment not found"
}
```

```json 400 Already Completed
{
  "error": "Investment has already been completed or cancelled"
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Withdrawal completed successfully |
| 400 | Bad Request - Invalid or missing parameters |
| 401 | Unauthorized - Invalid or missing API key |
| 404 | Not Found - Investment not found |
| 500 | Internal Server Error |

## Notes

- Only active investments can be withdrawn.
- The withdrawal will return the principal amount plus any interest earned.
- Interest is calculated up to the moment of withdrawal.
- The transaction may take a few moments to be confirmed on the blockchain.
- The funds will be transferred back to the associated agent's wallet.


================================================
FILE: api-reference/transactions/get-transaction-summary.mdx
================================================
---
title: 'Transaction Summary'
api: 'GET /transactions/summary'
description: 'Get a summary of financial activity for a date range'
---

Provides a summary of financial activity within the specified date range, including deposits, payments, and interest earned.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Query Parameters

<ParamField query="start_date" type="string" format="date-time" required>
  Start date for summary calculation (ISO 8601 format)
</ParamField>

<ParamField query="end_date" type="string" format="date-time" required>
  End date for summary calculation (ISO 8601 format)
</ParamField>

## Response

<ResponseField name="totalIncoming" type="number">
  Total amount received during the period
</ResponseField>

<ResponseField name="totalOutgoing" type="number">
  Total amount spent during the period
</ResponseField>

<ResponseField name="netChange" type="number">
  Net financial change (incoming - outgoing)
</ResponseField>

<ResponseField name="interestEarned" type="number">
  Interest earned from savings during the period
</ResponseField>

<ResponseField name="breakdown" type="object">
  <Expandable title="properties">
    <ResponseField name="deposits" type="number">
      Total deposits to agent wallets
    </ResponseField>
    <ResponseField name="withdrawals" type="number">
      Total withdrawals from agent wallets
    </ResponseField>
    <ResponseField name="payments" type="number">
      Total payments to external accounts
    </ResponseField>
    <ResponseField name="savingsDeposits" type="number">
      Total deposits to savings accounts
    </ResponseField>
    <ResponseField name="savingsWithdrawals" type="number">
      Total withdrawals from savings accounts
    </ResponseField>
    <ResponseField name="interest" type="number">
      Total interest earned
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="period" type="object">
  <Expandable title="properties">
    <ResponseField name="start" type="string">
      Start date of the summary period
    </ResponseField>
    <ResponseField name="end" type="string">
      End date of the summary period
    </ResponseField>
    <ResponseField name="days" type="number">
      Number of days in the period
    </ResponseField>
  </Expandable>
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X GET "https://api.magebank.ai/transactions/summary?start_date=2025-05-01T00:00:00Z&end_date=2025-05-31T23:59:59Z" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getTransactionSummary(startDate, endDate) {
  try {
    const response = await axios.get('https://api.magebank.ai/transactions/summary', {
      params: {
        start_date: startDate.toISOString(),
        end_date: endDate.toISOString()
      },
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log('Transaction summary:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error retrieving transaction summary:', error.response ? error.response.data : error.message);
    throw error;
  }
}

// Example: Get summary for May 2025
const startDate = new Date('2025-05-01T00:00:00Z');
const endDate = new Date('2025-05-31T23:59:59Z');
getTransactionSummary(startDate, endDate);
```

```python Python
import requests
from datetime import datetime

def get_transaction_summary(start_date, end_date):
    url = "https://api.magebank.ai/transactions/summary"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    params = {
        "start_date": start_date.isoformat(),
        "end_date": end_date.isoformat()
    }
    
    response = requests.get(url, headers=headers, params=params)
    
    if response.status_code == 200:
        summary = response.json()
        print("Transaction summary:", summary)
        return summary
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

# Example: Get summary for May 2025
from datetime import datetime
start_date = datetime(2025, 5, 1, 0, 0, 0)
end_date = datetime(2025, 5, 31, 23, 59, 59)
get_transaction_summary(start_date, end_date)
```

</CodeGroup>

## Example Response

```json
{
  "totalIncoming": 1250.50,
  "totalOutgoing": 750.25,
  "netChange": 500.25,
  "interestEarned": 12.75,
  "breakdown": {
    "deposits": 1000.00,
    "withdrawals": 500.00,
    "payments": 250.25,
    "savingsDeposits": 250.50,
    "savingsWithdrawals": 0.00,
    "interest": 12.75
  },
  "period": {
    "start": "2025-05-01T00:00:00Z",
    "end": "2025-05-31T23:59:59Z",
    "days": 31
  }
}
```

## Error Responses

<ResponseExample>
```json 400 Bad Request
{
  "error": "Invalid date format. Please use ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)."
}
```

```json 400 Invalid Range
{
  "error": "End date must be after start date."
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Summary data retrieved successfully |
| 400 | Bad Request - Invalid parameters |
| 401 | Unauthorized - Invalid or missing API key |
| 500 | Internal Server Error |

## Notes

- Dates must be provided in ISO 8601 format (e.g., `2025-05-01T00:00:00Z`).
- The maximum date range is 366 days (1 year).
- All financial amounts are returned in USDC by default.
- The summary includes all transactions for all agents associated with the user.


================================================
FILE: api-reference/transactions/introduction.mdx
================================================
---
title: 'Introduction'
description: 'Track and analyze blockchain transactions'
---

The Transactions API allows you to monitor and analyze blockchain transactions between agents and external wallets. These endpoints provide visibility into the flow of funds and financial activity within your MageBank account.

## Transaction Model

Each transaction in the MageBank system consists of:

- **Transaction Hash**: Unique blockchain transaction identifier (txHash)
- **Status**: Current state of the transaction (pending, completed, failed)
- **Amount**: Value transferred in the transaction
- **Currency**: Type of cryptocurrency used
- **Sender/Receiver**: Wallet addresses involved in the transaction
- **Timestamp**: When the transaction occurred

```json
{
  "txHash": "0x123...abc",
  "status": "completed",
  "amount": "50",
  "currency": "USDC",
  "from_wallet": "0xa55B42bA7B639bB9CEc2dB2520aC8Cff588895f6",
  "to_wallet": "0xb66C42bA7B639bB9CEc2dB2520aC8Cff588895f6",
  "timestamp": "2025-05-03T18:52:39.911685+00:00"
}
```

## Available Endpoints

<CardGroup>
  <Card title="Transaction Summary" icon="chart-bar" href="/api-reference/transactions/get-transaction-summary">
    Get a summary of financial activity for a date range
  </Card>
</CardGroup>

## Understanding Transactions

Transactions in MageBank have several key characteristics:

1. **On-Chain Execution**: All financial movements between wallets occur on the blockchain
2. **Immutable Record**: Once confirmed, transactions cannot be altered or deleted
3. **Status Tracking**: Transactions progress through various states (pending, completed, failed)
4. **Financial Reporting**: Transaction data forms the basis for financial reports and analytics

## Types of Transactions

MageBank tracks several types of transactions:

| Type | Description |
|------|-------------|
| Deposits | Funds transferred from user wallet to agent wallet |
| Withdrawals | Funds transferred from agent wallet to user wallet |
| Agent-to-Agent | Transfers between different agent wallets |
| External Payments | Payments to external wallets outside MageBank |
| Savings Deposits | Funds transferred to savings accounts |
| Savings Withdrawals | Funds transferred from savings accounts |

## Best Practices

- Regularly review transaction summaries to monitor financial activity
- Keep track of transaction hashes for reference and troubleshooting
- Allow sufficient time for transactions to be confirmed on the blockchain
- Use date ranges to filter transactions for specific reporting periods
- Consider implementing webhooks to receive real-time transaction notifications

## Next Steps

Use the endpoints in this section to track and analyze transactions. After reviewing transactions, you can:

- Create [payment reports](/api-reference/payments/export-payments) for accounting purposes
- Set up [savings accounts](/api-reference/savings/introduction) to earn interest on idle funds
- Manage [agent funding](/api-reference/agents/deposit) based on transaction patterns


================================================
FILE: api-reference/users/get-wallet-balance.mdx
================================================
---
title: 'Get Wallet Balance'
api: 'GET /user/wallet-balance'
description: "Retrieve the balance of a user's wallet"
---

Retrieves the user's wallet balance from the blockchain in USDC, ETH, or other available assets.

## Request Headers

<ParamField header="x-api-key" type="string" required>
  Your API key for authentication
</ParamField>

## Response

<ResponseField name="success" type="boolean">
  Whether the balance retrieval was successful
</ResponseField>

<ResponseField name="balance" type="string">
  Current wallet balance
</ResponseField>

<ResponseField name="asset" type="string">
  Asset type (cryptocurrency)
</ResponseField>

<ResponseField name="message" type="string">
  Additional information about the balance retrieval
</ResponseField>

<ResponseField name="source" type="string">
  Source of the balance information
</ResponseField>

## Example Request

<CodeGroup>

```bash cURL
curl -X GET "https://api.magebank.ai/user/wallet-balance" \
  -H "x-api-key: YOUR_API_KEY"
```

```javascript Node.js
const axios = require('axios');

async function getWalletBalance() {
  try {
    const response = await axios.get('https://api.magebank.ai/user/wallet-balance', {
      headers: {
        'x-api-key': 'YOUR_API_KEY'
      }
    });
    
    console.log('Wallet balance:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error retrieving wallet balance:', error.response ? error.response.data : error.message);
    throw error;
  }
}

getWalletBalance();
```

```python Python
import requests

def get_wallet_balance():
    url = "https://api.magebank.ai/user/wallet-balance"
    headers = {
        "x-api-key": "YOUR_API_KEY"
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        balance_data = response.json()
        print("Wallet balance:", balance_data)
        return balance_data
    else:
        print(f"Error: {response.status_code}")
        print(response.text)
        raise Exception(f"API request failed with status {response.status_code}")

get_wallet_balance()
```

</CodeGroup>

## Example Responses

<ResponseExample>
```json USDC Balance
{
  "success": true,
  "balance": "100.50",
  "asset": "USDC",
  "message": "Balance retrieved successfully",
  "source": "blockchain"
}
```

```json ETH Balance
{
  "success": true,
  "balance": "0.05",
  "asset": "ETH",
  "message": "USDC balance not found, using ETH balance",
  "source": "blockchain"
}
```

```json Zero Balance
{
  "success": true,
  "balance": "0.00",
  "message": "All balance fetching methods failed",
  "source": "blockchain"
}
```
</ResponseExample>

## Error Responses

<ResponseExample>
```json 400 Bad Request
{
  "error": "Invalid wallet address format"
}
```

```json 401 Unauthorized
{
  "error": "Invalid or missing API key"
}
```

```json 500 Internal Server Error
{
  "error": "Internal Server Error"
}
```
</ResponseExample>

## Status Codes

| Status Code | Description |
|-------------|-------------|
| 200 | Wallet balance retrieved successfully |
| 400 | Bad Request - Invalid wallet address |
| 401 | Unauthorized - Invalid or missing API key |
| 500 | Internal Server Error |

## Notes

- The API automatically determines the user's wallet address from their account.
- The endpoint checks for USDC first, then ETH, and finally any other tokens.
- Balance is returned as a string to preserve precision for financial calculations.
- If no balance is found, the API will return a successful response with a zero balance.


================================================
FILE: api-reference/users/introduction.mdx
================================================
---
title: 'Introduction'
description: 'Manage user accounts and wallet balances'
---

The Users API provides endpoints for managing user accounts and accessing wallet balances. These endpoints enable you to check your wallet balance and manage other user-specific data.

## User and Wallet Model

Each user in the MageBank platform includes:

1. **Identity**:
   - Unique user ID (UUID)
   - Name
   - Email
   - Role
   - Organization ID

2. **Authentication**:
   - API key
   - OAuth provider

3. **Wallet**:
   - Wallet address
   - Associated blockchain network
   - Balance (retrieved in real-time from blockchain)

## Available Endpoints

<CardGroup>
  <Card title="Get Wallet Balance" icon="wallet" href="/api-reference/users/get-wallet-balance">
    Retrieve the user's wallet balance
  </Card>
</CardGroup>

## Wallet Operations

Wallets in MageBank have several key characteristics:

1. **Associated with User**: Each user has a primary wallet for funding agents
2. **Automatic Agent Wallets**: Each agent also automatically gets a dedicated wallet upon creation
3. **Network Specific**: Wallets operate on specific blockchain networks (mainnet or testnets)
4. **Balance Reporting**: All balances are retrieved in real-time from the blockchain
5. **Fallback Strategy**: Balance retrieval follows a fallback strategy to ensure reliability

## User Authentication

All API requests require authentication using an API key. The key identifies the user and provides access to their data. 

Your API key should be included in all requests as an HTTP header:

```bash
x-api-key: YOUR_API_KEY
```


================================================
FILE: essentials/code.mdx
================================================
---
title: 'Code Blocks'
description: 'Display inline code and code blocks'
icon: 'code'
---

## Basic

### Inline Code

To denote a `word` or `phrase` as code, enclose it in backticks (`).

```
To denote a `word` or `phrase` as code, enclose it in backticks (`).
```

### Code Block

Use [fenced code blocks](https://www.markdownguide.org/extended-syntax/#fenced-code-blocks) by enclosing code in three backticks and follow the leading ticks with the programming language of your snippet to get syntax highlighting. Optionally, you can also write the name of your code after the programming language.

```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

````md
```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
````



================================================
FILE: essentials/images.mdx
================================================
---
title: 'Images and Embeds'
description: 'Add image, video, and other HTML elements'
icon: 'image'
---

<img
  style={{ borderRadius: '0.5rem' }}
  src="https://mintlify-assets.b-cdn.net/bigbend.jpg"
/>

## Image

### Using Markdown

The [markdown syntax](https://www.markdownguide.org/basic-syntax/#images) lets you add images using the following code

```md
![title](/path/image.jpg)
```

Note that the image file size must be less than 5MB. Otherwise, we recommend hosting on a service like [Cloudinary](https://cloudinary.com/) or [S3](https://aws.amazon.com/s3/). You can then use that URL and embed.

### Using Embeds

To get more customizability with images, you can also use [embeds](/writing-content/embed) to add images

```html
<img height="200" src="/path/image.jpg" />
```

## Embeds and HTML elements

<iframe
  width="560"
  height="315"
  src="https://www.youtube.com/embed/4KzFe50RQkQ"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
  style={{ width: '100%', borderRadius: '0.5rem' }}
></iframe>

<br />

<Tip>

Mintlify supports [HTML tags in Markdown](https://www.markdownguide.org/basic-syntax/#html). This is helpful if you prefer HTML tags to Markdown syntax, and lets you create documentation with infinite flexibility.

</Tip>

### iFrames

Loads another HTML page within the document. Most commonly used for embedding videos.

```html
<iframe src="https://www.youtube.com/embed/4KzFe50RQkQ"> </iframe>
```



================================================
FILE: essentials/markdown.mdx
================================================
---
title: 'Markdown Syntax'
description: 'Text, title, and styling in standard markdown'
icon: 'text-size'
---

## Titles

Best used for section headers.

```md
## Titles
```

### Subtitles

Best use to subsection headers.

```md
### Subtitles
```

<Tip>

Each **title** and **subtitle** creates an anchor and also shows up on the table of contents on the right.

</Tip>

## Text Formatting

We support most markdown formatting. Simply add `**`, `_`, or `~` around text to format it.

| Style         | How to write it   | Result          |
| ------------- | ----------------- | --------------- |
| Bold          | `**bold**`        | **bold**        |
| Italic        | `_italic_`        | _italic_        |
| Strikethrough | `~strikethrough~` | ~strikethrough~ |

You can combine these. For example, write `**_bold and italic_**` to get **_bold and italic_** text.

You need to use HTML to write superscript and subscript text. That is, add `<sup>` or `<sub>` around your text.

| Text Size   | How to write it          | Result                 |
| ----------- | ------------------------ | ---------------------- |
| Superscript | `<sup>superscript</sup>` | <sup>superscript</sup> |
| Subscript   | `<sub>subscript</sub>`   | <sub>subscript</sub>   |

## Linking to Pages

You can add a link by wrapping text in `[]()`. You would write `[link to google](https://google.com)` to [link to google](https://google.com).

Links to pages in your docs need to be root-relative. Basically, you should include the entire folder path. For example, `[link to text](/writing-content/text)` links to the page "Text" in our components section.

Relative links like `[link to text](../text)` will open slower because we cannot optimize them as easily.

## Blockquotes

### Singleline

To create a blockquote, add a `>` in front of a paragraph.

> Dorothy followed her through many of the beautiful rooms in her castle.

```md
> Dorothy followed her through many of the beautiful rooms in her castle.
```

### Multiline

> Dorothy followed her through many of the beautiful rooms in her castle.
>
> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.

```md
> Dorothy followed her through many of the beautiful rooms in her castle.
>
> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.
```

### LaTeX

Mintlify supports [LaTeX](https://www.latex-project.org) through the Latex component.

<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>

```md
<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>
```



================================================
FILE: essentials/navigation.mdx
================================================
---
title: 'Navigation'
description: 'The navigation field in docs.json defines the pages that go in the navigation menu'
icon: 'map'
---

The navigation menu is the list of links on every website.

You will likely update `docs.json` every time you add a new page. Pages do not show up automatically.

## Navigation syntax

Our navigation syntax is recursive which means you can make nested navigation groups. You don't need to include `.mdx` in page names.

<CodeGroup>

```json Regular Navigation
"navigation": {
  "tabs": [
    {
      "tab": "Docs",
      "groups": [
        {
          "group": "Getting Started",
          "pages": ["quickstart"]
        }
      ]
    }
  ]
}
```

```json Nested Navigation
"navigation": {
  "tabs": [
    {
      "tab": "Docs",
      "groups": [
        {
          "group": "Getting Started",
          "pages": [
            "quickstart",
            {
              "group": "Nested Reference Pages",
              "pages": ["nested-reference-page"]
            }
          ]
        }
      ]
    }
  ]
}
```

</CodeGroup>

## Folders

Simply put your MDX files in folders and update the paths in `docs.json`.

For example, to have a page at `https://yoursite.com/your-folder/your-page` you would make a folder called `your-folder` containing an MDX file called `your-page.mdx`.

<Warning>

You cannot use `api` for the name of a folder unless you nest it inside another folder. Mintlify uses Next.js which reserves the top-level `api` folder for internal server calls. A folder name such as `api-reference` would be accepted.

</Warning>

```json Navigation With Folder
"navigation": {
  "tabs": [
    {
      "tab": "Docs",
      "groups": [
        {
          "group": "Group Name",
          "pages": ["your-folder/your-page"]
        }
      ]
    }
  ]
}
```

## Hidden Pages

MDX files not included in `docs.json` will not show up in the sidebar but are accessible through the search bar and by linking directly to them.



================================================
FILE: essentials/reusable-snippets.mdx
================================================
---
title: Reusable Snippets
description: Reusable, custom snippets to keep content in sync
icon: 'recycle'
---

import SnippetIntro from '/snippets/snippet-intro.mdx';

<SnippetIntro />

## Creating a custom snippet

**Pre-condition**: You must create your snippet file in the `snippets` directory.

<Note>
  Any page in the `snippets` directory will be treated as a snippet and will not
  be rendered into a standalone page. If you want to create a standalone page
  from the snippet, import the snippet into another file and call it as a
  component.
</Note>

### Default export

1. Add content to your snippet file that you want to re-use across multiple
   locations. Optionally, you can add variables that can be filled in via props
   when you import the snippet.

```mdx snippets/my-snippet.mdx
Hello world! This is my content I want to reuse across pages. My keyword of the
day is {word}.
```

<Warning>
  The content that you want to reuse must be inside the `snippets` directory in
  order for the import to work.
</Warning>

2. Import the snippet into your destination file.

```mdx destination-file.mdx
---
title: My title
description: My Description
---

import MySnippet from '/snippets/path/to/my-snippet.mdx';

## Header

Lorem impsum dolor sit amet.

<MySnippet word="bananas" />
```

### Reusable variables

1. Export a variable from your snippet file:

```mdx snippets/path/to/custom-variables.mdx
export const myName = 'my name';

export const myObject = { fruit: 'strawberries' };
```

2. Import the snippet from your destination file and use the variable:

```mdx destination-file.mdx
---
title: My title
description: My Description
---

import { myName, myObject } from '/snippets/path/to/custom-variables.mdx';

Hello, my name is {myName} and I like {myObject.fruit}.
```

### Reusable components

1. Inside your snippet file, create a component that takes in props by exporting
   your component in the form of an arrow function.

```mdx snippets/custom-component.mdx
export const MyComponent = ({ title }) => (
  <div>
    <h1>{title}</h1>
    <p>... snippet content ...</p>
  </div>
);
```

<Warning>
  MDX does not compile inside the body of an arrow function. Stick to HTML
  syntax when you can or use a default export if you need to use MDX.
</Warning>

2. Import the snippet into your destination file and pass in the props

```mdx destination-file.mdx
---
title: My title
description: My Description
---

import { MyComponent } from '/snippets/custom-component.mdx';

Lorem ipsum dolor sit amet.

<MyComponent title={'Custom title'} />
```



================================================
FILE: essentials/settings.mdx
================================================
---
title: 'Global Settings'
description: 'Mintlify gives you complete control over the look and feel of your documentation using the docs.json file'
icon: 'gear'
---

Every Mintlify site needs a `docs.json` file with the core configuration settings. Learn more about the [properties](#properties) below.

## Properties

<ResponseField name="name" type="string" required>
Name of your project. Used for the global title.

Example: `mintlify`

</ResponseField>

<ResponseField name="navigation" type="Navigation[]" required>
  An array of groups with all the pages within that group
  <Expandable title="Navigation">
    <ResponseField name="group" type="string">
    The name of the group.

    Example: `Settings`

    </ResponseField>
    <ResponseField name="pages" type="string[]">
    The relative paths to the markdown files that will serve as pages.

    Example: `["customization", "page"]`

    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="logo" type="string or object">
  Path to logo image or object with path to "light" and "dark" mode logo images
  <Expandable title="Logo">
    <ResponseField name="light" type="string">
      Path to the logo in light mode
    </ResponseField>
    <ResponseField name="dark" type="string">
      Path to the logo in dark mode
    </ResponseField>
    <ResponseField name="href" type="string" default="/">
      Where clicking on the logo links you to
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="favicon" type="string">
  Path to the favicon image
</ResponseField>

<ResponseField name="colors" type="Colors">
  Hex color codes for your global theme
  <Expandable title="Colors">
    <ResponseField name="primary" type="string" required>
      The primary color. Used for most often for highlighted content, section
      headers, accents, in light mode
    </ResponseField>
    <ResponseField name="light" type="string">
      The primary color for dark mode. Used for most often for highlighted
      content, section headers, accents, in dark mode
    </ResponseField>
    <ResponseField name="dark" type="string">
      The primary color for important buttons
    </ResponseField>
    <ResponseField name="background" type="object">
      The color of the background in both light and dark mode
      <Expandable title="Object">
        <ResponseField name="light" type="string" required>
          The hex color code of the background in light mode
        </ResponseField>
        <ResponseField name="dark" type="string" required>
          The hex color code of the background in dark mode
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="topbarLinks" type="TopbarLink[]">
  Array of `name`s and `url`s of links you want to include in the topbar
  <Expandable title="TopbarLink">
    <ResponseField name="name" type="string">
    The name of the button.

    Example: `Contact us`
    </ResponseField>
    <ResponseField name="url" type="string">
    The url once you click on the button. Example: `https://mintlify.com/docs`
    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="topbarCtaButton" type="Call to Action">
  <Expandable title="Topbar Call to Action">
    <ResponseField name="type" type={'"link" or "github"'} default="link">
    Link shows a button. GitHub shows the repo information at the url provided including the number of GitHub stars.
    </ResponseField>
    <ResponseField name="url" type="string">
    If `link`: What the button links to.
    
    If `github`: Link to the repository to load GitHub information from.
    </ResponseField>
    <ResponseField name="name" type="string">
    Text inside the button. Only required if `type` is a `link`.
    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="versions" type="string[]">
  Array of version names. Only use this if you want to show different versions
  of docs with a dropdown in the navigation bar.
</ResponseField>

<ResponseField name="anchors" type="Anchor[]">
  An array of the anchors, includes the `icon`, `color`, and `url`.
  <Expandable title="Anchor">
    <ResponseField name="icon" type="string">
    The [Font Awesome](https://fontawesome.com/search?q=heart) icon used to feature the anchor.

    Example: `comments`
    </ResponseField>
    <ResponseField name="name" type="string">
    The name of the anchor label.

    Example: `Community`
    </ResponseField>
    <ResponseField name="url" type="string">
      The start of the URL that marks what pages go in the anchor. Generally, this is the name of the folder you put your pages in.
    </ResponseField>
    <ResponseField name="color" type="string">
      The hex color of the anchor icon background. Can also be a gradient if you pass an object with the properties `from` and `to` that are each a hex color.
    </ResponseField>
    <ResponseField name="version" type="string">
      Used if you want to hide an anchor until the correct docs version is selected.
    </ResponseField>
    <ResponseField name="isDefaultHidden" type="boolean" default="false">
      Pass `true` if you want to hide the anchor until you directly link someone to docs inside it.
    </ResponseField>
    <ResponseField name="iconType" default="duotone" type="string">
      One of: "brands", "duotone", "light", "sharp-solid", "solid", or "thin"
    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="topAnchor" type="Object">
  Override the default configurations for the top-most anchor.
  <Expandable title="Object">
    <ResponseField name="name" default="Documentation" type="string">
      The name of the top-most anchor
    </ResponseField>
    <ResponseField name="icon" default="book-open" type="string">
      Font Awesome icon.
    </ResponseField>
    <ResponseField name="iconType" default="duotone" type="string">
      One of: "brands", "duotone", "light", "sharp-solid", "solid", or "thin"
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="tabs" type="Tabs[]">
  An array of navigational tabs.
  <Expandable title="Tabs">
    <ResponseField name="name" type="string">
      The name of the tab label.
    </ResponseField>
    <ResponseField name="url" type="string">
      The start of the URL that marks what pages go in the tab. Generally, this
      is the name of the folder you put your pages in.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="api" type="API">
  Configuration for API settings. Learn more about API pages at [API Components](/api-playground/demo).
  <Expandable title="API">
    <ResponseField name="baseUrl" type="string">
      The base url for all API endpoints. If `baseUrl` is an array, it will enable for multiple base url
      options that the user can toggle.
    </ResponseField>

    <ResponseField name="auth" type="Auth">
      <Expandable title="Auth">
        <ResponseField name="method" type='"bearer" | "basic" | "key"'>
          The authentication strategy used for all API endpoints.
        </ResponseField>
        <ResponseField name="name" type="string">
        The name of the authentication parameter used in the API playground.

        If method is `basic`, the format should be `[usernameName]:[passwordName]`
        </ResponseField>
        <ResponseField name="inputPrefix" type="string">
        The default value that's designed to be a prefix for the authentication input field.

        E.g. If an `inputPrefix` of `AuthKey` would inherit the default input result of the authentication field as `AuthKey`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="playground" type="Playground">
      Configurations for the API playground

      <Expandable title="Playground">
        <ResponseField name="mode" default="show" type='"show" | "simple" | "hide"'>
          Whether the playground is showing, hidden, or only displaying the endpoint with no added user interactivity `simple`

          Learn more at the [playground guides](/api-playground/demo)
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="maintainOrder" type="boolean">
      Enabling this flag ensures that key ordering in OpenAPI pages matches the key ordering defined in the OpenAPI file.

      <Warning>This behavior will soon be enabled by default, at which point this field will be deprecated.</Warning>
    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="openapi" type="string | string[]">
  A string or an array of strings of URL(s) or relative path(s) pointing to your
  OpenAPI file.
  
  Examples:
  <CodeGroup>
    ```json Absolute
    "openapi": "https://example.com/openapi.json"
    ```
    ```json Relative
    "openapi": "/openapi.json"
    ```
    ```json Multiple
    "openapi": ["https://example.com/openapi1.json", "/openapi2.json", "/openapi3.json"]
    ```
  </CodeGroup>

</ResponseField>

<ResponseField name="footerSocials" type="FooterSocials">
  An object of social media accounts where the key:property pair represents the social media platform and the account url.
  
  Example: 
  ```json
  {
    "x": "https://x.com/mintlify",
    "website": "https://mintlify.com"
  }
  ```
  <Expandable title="FooterSocials">
    <ResponseField name="[key]" type="string">
    One of the following values `website`, `facebook`, `x`, `discord`, `slack`, `github`, `linkedin`, `instagram`, `hacker-news`
    
    Example: `x`
    </ResponseField>
    <ResponseField name="property" type="string">
    The URL to the social platform.
    
    Example: `https://x.com/mintlify`
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="feedback" type="Feedback">
  Configurations to enable feedback buttons

  <Expandable title="Feedback">
    <ResponseField name="suggestEdit" type="boolean" default="false">
    Enables a button to allow users to suggest edits via pull requests
    </ResponseField>
    <ResponseField name="raiseIssue" type="boolean" default="false">
    Enables a button to allow users to raise an issue about the documentation
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="modeToggle" type="ModeToggle">
  Customize the dark mode toggle.
  <Expandable title="ModeToggle">
    <ResponseField name="default" type={'"light" or "dark"'}>
      Set if you always want to show light or dark mode for new users. When not
      set, we default to the same mode as the user's operating system.
    </ResponseField>
    <ResponseField name="isHidden" type="boolean" default="false">
      Set to true to hide the dark/light mode toggle. You can combine `isHidden` with `default` to force your docs to only use light or dark mode. For example:
      
      <CodeGroup>
      ```json Only Dark Mode
      "modeToggle": {
        "default": "dark",
        "isHidden": true
      }
      ```

      ```json Only Light Mode
      "modeToggle": {
        "default": "light",
        "isHidden": true
      }
      ```
      </CodeGroup>

    </ResponseField>

  </Expandable>
</ResponseField>

<ResponseField name="backgroundImage" type="string">
  A background image to be displayed behind every page. See example with
  [Infisical](https://infisical.com/docs) and [FRPC](https://frpc.io).
</ResponseField>








================================================
FILE: snippets/api-key-notice.mdx
================================================



================================================
FILE: snippets/error-handling.mdx
================================================



================================================
FILE: snippets/response-formats.mdx
================================================



================================================
FILE: snippets/snippet-intro.mdx
================================================
One of the core principles of software development is DRY (Don't Repeat
Yourself). This is a principle that apply to documentation as
well. If you find yourself repeating the same content in multiple places, you
should consider creating a custom snippet to keep your content in sync.



================================================
FILE: user-guide/financing.mdx
================================================
---
title: "Financing"
icon: "money-bill-trend-up"
---

## Coming Soon


================================================
FILE: user-guide/get-api-key.mdx
================================================
---
title: "Get API Key"
description: "Generate and manage your MageBank API key"
icon: "key"
---

Your API key is essential for authenticating your agents and connecting to the MageBank platform. Follow these steps to get your API key.

## Quick Start

<Steps>
    <Step title="Visit MageBank Dashboard">
        Navigate to the [MageBank Dashboard](https://www.magebank.ai/dashboard/)
        <Frame>
            <img src="/images/get-api-key/dashboard-login.png" alt="MageBank Dashboard" />
        </Frame>
    </Step>

    <Step title="Sign up or sign in">
        Create a new account or sign in to your existing account.
        <Note>
            When you first sign up, an API key will be automatically generated for your account.
        </Note>
    </Step>

    <Step title="Navigate to Integrate Agent section">
        Once logged in, navigate to the [Integrate Agent](https://www.magebank.ai/dashboard/integrate-agent) section from the sidebar menu.
        <Frame>
            <img src="/images/get-api-key/integrate-agent-menu.png" alt="Integrate Agent Menu" />
        </Frame>
    </Step>

    <Step title="Access your API key">
        Click on the "API Key" button which will open a modal dialog.
        <Frame>
            <img src="/images/get-api-key/api-key-modal.png" alt="API Key Modal" />
        </Frame>
    </Step>

    <Step title="Copy your key">
        Copy your API key for use in your applications.
        <Warning>
            Keep your API key secure. Anyone with your key can perform actions on behalf of your account.
        </Warning>
    </Step>
</Steps>

## Using Your API Key

Your API key must be included in all API requests to the server in the `x-api-key` header:

```bash
x-api-key: YOUR_API_KEY
```

### Example Request

```javascript
// Example using fetch
const response = await fetch('https://api.magebank.ai/v1/agents', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
    'x-api-key': YOUR_API_KEY
  }
});

const data = await response.json();
```

## API Key Security Best Practices

Protecting your API key is critical - anyone with your key can perform actions on behalf of your account. Follow these security practices:

- **Never expose your API key in client-side code** - Always make API calls from your server
- **Don't store keys in code repositories** - Even private repositories can be compromised
- **Use environment variables** - Store your key in environment variables or a secure secrets manager
- **Restrict network access** - Limit API calls to specific IP addresses when possible
- **Rotate keys periodically** - Generate a new key and deprecate old ones on a regular schedule
- **Use dedicated keys for different environments** - Separate keys for development and production

## Regenerating Your API Key

If your key has been compromised or you need to generate a new one:


================================================
FILE: user-guide/register-agent.mdx
================================================
---
title: "Register Agent"
description: "Create and manage AI agents on MageBank"
icon: "robot"
---

Create an AI agent to execute transactions and manage funds on your behalf. Agents can be configured with custom spending limits and approval requirements.

## Creating a New Agent

<Steps>
  <Step title="Navigate to Integrate Agent">
    Access the Integrate Agent section from the sidebar menu.
    
    <Frame>
      <img src="/images/register-agent/integrate-agent-menu.png" alt="Integrate Agent Menu" />
    </Frame>
  </Step>
  
  <Step title="Click Add New Agent">
    Click the "Add new agent" button in the top right corner to begin the agent creation process.
    
    <Frame>
      <img src="/images/register-agent/add-new-agent-button.png" alt="Add New Agent Button" />
    </Frame>
  </Step>
  
  <Step title="Fill the KYA Form">
    The first step displays your current wallet balance and requires you to enter basic information about your agent:
    
    - **Name**: A descriptive name for your agent
    - **Description**: Purpose and functionality of the agent
    - **Allocated Balance**: Amount to fund your agent (this will be deducted from your main wallet)
      - Select from preset amounts or use the custom amount option
      - For custom amounts, enter a value and click "Set Amount"
    - **Tags** (optional): Add up to 5 tags to categorize your agent
    
    <Frame>
      <img src="/images/register-agent/agent-form.png" alt="Agent Information Form" />
    </Frame>
  </Step>
  
  <Step title="Configure Payment Rules">
    In the second step, you'll set transaction limits and approval requirements:
    
    - **Daily Limit**: Maximum amount the agent can spend in a single day
    - **Transaction Limit**: Maximum amount for a single transaction
    - **Require Approval Above Amount**: Transactions above this amount will require your manual approval
    - **Require Approval For All Transactions**: Toggle to require approval for all transactions regardless of amount
    
    <Frame>
      <img src="/images/register-agent/payment-rules.png" alt="Payment Rules Configuration" />
    </Frame>
  </Step>
  
  <Step title="Complete Agent Registration">
    After clicking "Next", your agent will be created. The confirmation screen displays:
    
    - **Agent ID**: Unique identifier for your agent (copy this for API calls)
    - **API Key**: Your MageBank API key (same for all your agents)
    - **Balance**: The amount allocated to your agent
    - **Payment Rules**: Summary of all transaction limits and approval settings
    - **Updated Balance**: Your remaining wallet balance after funding the agent
    
    <Frame>
      <img src="/images/register-agent/agent-created.png" alt="Agent Created Successfully" />
    </Frame>
    
    <Note>
      Keep your API key secure and never share it publicly. You'll need both the API key and Agent ID to make transactions with this agent.
    </Note>
  </Step>
</Steps>

## Understanding Agent Configuration

### Balance Allocation

When you create an agent, you allocate funds from your main wallet to the agent's wallet. This amount is deducted immediately from your global balance and becomes available for the agent to use within its configured limits.

<Note>
  It might take a few moments for the allocated funds to be fully transferred from your global account to the agent. During this time, you'll see the updated balances, but the blockchain transaction may still be processing.
</Note>

### Payment Rules

Payment rules determine how your agent can spend funds:

1. **Daily Limit**: Restricts the total amount an agent can spend in a 24-hour period
2. **Transaction Limit**: Caps the size of individual transactions
3. **Approval Requirements**: Configure when you need to manually approve transactions:
   - Above a specific amount
   - For all transactions (regardless of amount)

### Tags

Tags help organize your agents and make them easier to find. You can add up to 5 tags per agent and use them to filter your agents list. Common tag examples include:

- Project names (e.g., "marketing", "development")
- Agent functions (e.g., "payments", "subscriptions")
- Business units (e.g., "finance", "operations")

## Using Your Agent

Once created, your agent can:

- Make payments to external accounts
- Transfer funds between other agents
- Automatically process transactions within set limits
- Request approval for transactions exceeding limits

Access your agent in code using its unique Agent ID and your API key:

```javascript
// Example API call using your agent
const response = await fetch('https://api.magebank.ai/payments/register', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'x-api-key': 'YOUR_API_KEY'
  },
  body: JSON.stringify({
    senderagentid: 'agent_9LsHq7YUoDEuFrzBjO9paJ', // Your unique Agent ID
    receiveragentid: 'RECIPIENT_AGENT_ID',
    paymentdetails: {
      amount: 10,
      currency: 'USDC',
      method: 'CRYPTO_ADDRESS'
    },
    name: 'Payment description',
    type: 'EXTERNAL'
  })
});
```

## Managing Agents

After creating agents, you can:

- View all your agents in the Agents dashboard
- Monitor their transaction history
- Modify payment rules
- Add or remove funds
- Deactivate agents when no longer needed

<Frame>
  <img src="/images/register-agent/agents-dashboard.png" alt="Agents Dashboard" />
</Frame>


================================================
FILE: user-guide/savings-vault.mdx
================================================
---
title: "Savings Vault"
description: "Earn interest on your USDC holdings"
icon: "vault"
---

The MageBank Savings Vault allows you to earn interest on your USDC while maintaining full control and liquidity of your funds. Deposit from any of your agents and watch your savings grow in real-time.

## Savings Dashboard

The Savings Vault dashboard provides a comprehensive overview of your savings performance:

<Frame>
  <img src="/images/savings-vault/dashboard-overview.png" alt="Savings Vault Dashboard" />
</Frame>

### Key Dashboard Elements

- **Total Savings**: Real-time display of your total savings balance with live updates
- **APY**: Current annual percentage yield (interest rate)
- **Invested**: Total amount deposited into savings
- **1-year Projection**: Estimated value of your savings after one year at the current APY

### Transaction History

The dashboard includes a detailed table showing all your active investments:

| Column | Description |
|--------|-------------|
| Agent | The agent that funded the investment |
| Invested Amount | Principal amount deposited |
| Current Value | Real-time value including accrued interest |
| Interest Earned | Total interest earned since deposit |
| Duration | Time elapsed since investment |
| Current Balance | Available balance in the agent's wallet |

## Depositing Funds

Earn interest by depositing funds from your agent accounts into the Savings Vault:

<Steps>
  <Step title="Click Deposit">
    From the Savings Vault dashboard, click the "Deposit" button.
  </Step>
  
  <Step title="Select Agent and Amount">
    The deposit modal will appear with the following options:
    
    - Select the agent to fund the deposit
    - Enter the amount to deposit (up to the agent's available balance)
    - View the current APY and projected interest
    
    <Frame>
      <img src="/images/savings-vault/deposit-modal.png" alt="Deposit Modal" />
    </Frame>
    
    <Note>
      The system automatically calculates your projected earnings at the current APY rate and displays the estimated total value after one year.
    </Note>
  </Step>
  
  <Step title="Confirm Deposit">
    Review the deposit details:
    
    - Source agent
    - Deposit amount
    - Current APY
    - Projected yearly interest
    
    Click "Confirm deposit" to proceed.
    
    <Frame>
      <img src="/images/savings-vault/deposit-confirmation.png" alt="Confirm Deposit" />
    </Frame>
  </Step>
  
  <Step title="Deposit Complete">
    Once the transaction is processed, you'll see a confirmation screen with the transaction summary.
    
    <Frame>
      <img src="/images/savings-vault/deposit-confirmed.png" alt="Deposit Success" />
    </Frame>
    
    <Warning>
      The transaction might take a few minutes to process on the blockchain. Your dashboard will update automatically once the deposit is confirmed.
    </Warning>
  </Step>
</Steps>

## Withdrawing Funds

You can withdraw your funds at any time without penalties or waiting periods:

<Steps>
  <Step title="Click Withdraw">
    From the Savings Vault dashboard, click the "Withdraw" button.
  </Step>
  
  <Step title="Select Investment">
    The withdrawal modal will appear:
    
    - Select the agent investment you wish to withdraw from
    - View the investment details including principal, interest earned, and duration
    
    <Frame>
      <img src="/images/savings-vault/withdrawal-modal.png" alt="Withdraw Modal" />
    </Frame>
    
    When selecting an agent, you'll see a dropdown with all your active investments, including:
    - Agent name
    - Investment duration
    - Current value with earned interest
    
    <Frame>
      <img src="/images/savings-vault/withdrawal-agent-select.png" alt="Agent Selection" />
    </Frame>
  </Step>
  
  <Step title="Confirm Withdrawal">
    Review the withdrawal details:
    
    - Principal amount
    - Interest earned
    - Total withdrawal amount
    
    Click "Confirm withdrawal" to proceed.
    
    <Frame>
      <img src="/images/savings-vault/withdrawal-confirmation.png" alt="Confirm Withdrawal" />
    </Frame>
    
    <Note>
      The entire investment (principal plus earned interest) will be transferred back to the selected agent's wallet.
    </Note>
  </Step>
  
  <Step title="Withdrawal Complete">
    After processing, your funds will be available in the selected agent's wallet.
     
    <Frame>
      <img src="/images/savings-vault/withdrawal-confirmed.png" alt="Deposit Success" />
    </Frame>

    <Warning>
      The blockchain transaction might take a few minutes to complete. The agent's balance will update once the transaction is confirmed.
    </Warning>
  </Step>
</Steps>

## How Interest Works

The Savings Vault uses a compound interest model to grow your savings:

- **Interest Rate**: The current APY (Annual Percentage Yield) is displayed on the dashboard can be updated to as high as 12.5%
- **Real-time Calculation**: Interest accrues continuously and is calculated in real-time
- **No Lock-up Period**: Funds can be deposited or withdrawn at any time without penalties
- **Interest Disbursement**: Interest is added directly to your investment's current value

### Interest Calculation Formula

Your interest is calculated using the standard compound interest formula:

```
A = P(1 + r/n)^(nt)
```

Where:
- A = Final amount
- P = Principal (initial deposit)
- r = Annual interest rate (APY)
- n = Number of times interest is compounded per year
- t = Time (in years)

For the MageBank Savings Vault, interest is compounded continuously, resulting in the most favorable growth rate for your savings.

## API Integration

Integrate savings functionality into your applications using the MageBank API:

```javascript
// Example: Deposit to savings
const depositToSavings = async (agentId, amount) => {
  const response = await fetch('https://api.magebank.ai/savings/deposit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': 'YOUR_API_KEY'
    },
    body: JSON.stringify({
      agentId: agentId,
      amount: amount
    })
  });
  
  return await response.json();
};

// Example: Withdraw from savings
const withdrawFromSavings = async (investmentId) => {
  const response = await fetch('https://api.magebank.ai/savings/withdraw', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': 'YOUR_API_KEY'
    },
    body: JSON.stringify({
      investmentId: investmentId
    })
  });
  
  return await response.json();
};

// Example: Get savings dashboard data
const getSavingsDashboard = async () => {
  const response = await fetch('https://api.magebank.ai/savings/dashboard', {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': 'YOUR_API_KEY'
    }
  });
  
  return await response.json();
};
```


================================================
FILE: user-guide/transactions.mdx
================================================
---
title: "Transactions"
description: "Track and manage financial operations between agents"
icon: "money-bill-transfer"
---

Monitor and manage all financial operations between your agents and external accounts. The Transactions page provides a comprehensive view of your payment history and approval workflows.

## Transaction Dashboard

The Transactions dashboard displays all your financial activities in a detailed table with key information:

- **Transaction ID**: Unique identifier for each transaction
- **Direction**: Whether funds are moving into (Incoming) or out of (Outgoing) your agent
- **Date & Time**: When the transaction was initiated
- **Status**: Current processing state of the transaction
- **Approval**: Approval status and required actions
- **Receiver ID**: The agent receiving the funds
- **Amount**: Transaction value with currency (positive for incoming, negative for outgoing)

<Frame>
  <img src="/images/transactions/transactions-overview.png" alt="Transactions Dashboard" />
</Frame>

## Transaction Lifecycle

Each transaction follows a specific workflow:

1. **Creation**: When first registered, a transaction starts with "New" status
2. **Approval Check**: 
   - If approval is required (based on agent rules), status changes to "Waiting for Sender Approval"
   - If no approval is needed, it proceeds directly to processing
3. **Processing**: The system processes the transaction on the blockchain
4. **Completion**: Once processed, status changes to "Confirmed" with appropriate approval status

### Transaction Statuses

| Status | Description |
|--------|-------------|
| New | Transaction has been created and is either awaiting approval or being processed |
| Waiting | System is checking whether approval is required based on agent rules |
| Confirmed | Transaction has been fully processed on the blockchain |

### Approval Flow

1. When a transaction is first created, its status is set to "Waiting" while the system evaluates whether approval is required
2. If approval is required:
   - Status changes to "New"
   - Approval status changes to "Waiting for Sender Approval"
   - A request appears in the Payment Requests section
3. If approval is not required:
   - Status changes to "New" 
   - System immediately initiates the transaction
   - Once successful, status updates to "Confirmed" with "Approved" approval status

## Approving Transactions

When a transaction requires approval, you'll receive a notification in the Payment Approval Requests section:

<Frame>
  <img src="/images/transactions/payment-approval.png" alt="Payment Approval Interface" />
</Frame>

To approve or decline a transaction:

1. Navigate to [Payment Requests](https://www.magebank.ai/dashboard/payment-request)
2. Review transaction details (initiator, amount, currency, date)
3. Click the "PAY" button to approve or "X" button to decline
4. For approved transactions:
   - Status changes to "New"
   - After processing (may take a few minutes), status updates to "Confirmed" with "Approved" approval status
   - Funds transfer between accounts
5. For declined transactions:
   - Status immediately changes to "Confirmed" with "Declined" approval status
   - No funds are transferred

## Transaction Filtering and Export

Manage your transaction history with built-in tools:

### Time Filters

Filter transactions by time period using the dropdown in the top right:
- This Week (default)
- This Month
- This Year
- Custom Range

<Frame>
  <img src="/images/transactions/transaction-filters.png" alt="Transaction Time Filters" />
</Frame>

### Data Export

Export your transaction data in multiple formats:
- **XLSX** (Recommended): Includes advanced formatting and calculations
- **CSV**: Simple text format for universal compatibility
- **PDF**: Formatted document for sharing and printing

Click the "Export" button and select your preferred format.

<Frame>
  <img src="/images/transactions/export-options.png" alt="Transaction Export Options" />
</Frame>

## Understanding the Approval Flow

The approval workflow depends on the agent's configured payment rules:

1. **No Approval Required**: If the transaction is below the approval threshold and "Require Approval For All Transactions" is off, the transaction processes automatically.

2. **Approval Required**: A transaction will require approval if:
   - The amount exceeds the "Require Approval Above Amount" value
   - "Require Approval For All Transactions" is enabled
   - The transaction would exceed the daily limit

3. **Processing Time**: Even after approval, blockchain transactions may take a few minutes to process before showing as "Confirmed".

## API Integration

Integrate transaction management into your AI agents using the API:

```javascript
// Example: Create a payment between agents
const createPayment = async () => {
  const response = await fetch('https://api.magebank.ai/payments/register', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': 'YOUR_API_KEY'
    },
    body: JSON.stringify({
      senderagentid: 'agent_9LsHq7YUoDEuFrzBjO9paJ',
      receiveragentid: 'agent_mB5Da4t...',
      paymentdetails: {
        amount: 1.50,
        currency: 'USDC',
        method: 'CRYPTO_ADDRESS'
      },
      name: 'Monthly subscription payment',
      type: 'EXTERNAL'
    })
  });
  
  return await response.json();
};

// Example: Check payment status
const checkPaymentStatus = async (paymentId) => {
  const response = await fetch(`https://api.magebank.ai/payments/${paymentId}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': 'YOUR_API_KEY'
    }
  });
  
  return await response.json();
};
```

